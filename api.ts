/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Justap API
 * 欢迎阅读 Justap Api 文档  Justap 是为移动端应用和PC端应用打造的下一代聚合支付SAAS服务平台，通过一个 SDK 即可快速的支持各种形式的应用，并且一次接口完成多个不同支付渠道的接入。平台除了支持服务商子商户模式，同时还对商家自有商户（即自己前往微信、支付宝等机构开户）提供了完整的支持。  感谢您的支持，我们将不断探索，为您提供更优质的服务！如需技术支持可前往商户中心提交工单，支持工程师会尽快与您取得联系！  # 文档说明 采用 REST 风格设计。所有接口请求地址都是可预期的以及面向资源的。使用规范的 HTTP 响应代码来表示请求结果的正确或错误信息。使用 HTTP 内置的特性，如 HTTP Authentication 和 HTTP 请求方法让接口易于理解。  ## HTTP 状态码 HTTP 状态码可以用于表明服务的状态。服务器返回的 HTTP 状态码遵循 [RFC 7231](http://tools.ietf.org/html/rfc7231#section-6) 和 [IANA Status Code Registry](http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 标准。  ## 认证 在调用 API 时，必须提供 API Key 作为每个请求的身份验证。你可以在管理平台内管理你的 API Key。API Key 是商户在系统中的身份标识，请安全存储，确保其不要被泄露。如需获取或更新 API Key ，也可以在商户中心内进行操作。 Api Key 在使用自定义的 HTTP Header 进行传递。  ``` X-Justap-Api-Key ```  API Key 分为 live 和 test 两种模式。分别对应真实交易环境和模拟测试交易环境并且可以实时切换。 测试模式下的 API Key 会模拟交易等请求，但是不会产生任何真实交易行为和费用，便于调试和接入。  **⚠️ 注意**：在使用 live 模式前，需要先前往 `商户中心 -> 应用设置 -> 开发参数` 开启 live 模式。  <SecurityDefinitions />  ## 请求类型 所有的 API 请求只支持 HTTPS 方式调用。  ## 路由参数 路由参数是指出现在 URL 路径中的可变变量。在本文档中，使用 `{}` 包裹的部分。 例如： `{charge_id}`，在实际使用是，需要将 `{charge_id}` 替换为实际值 `charge_8a8sdf888888`  ## MIME Type MIME 类型用于指示服务器返回的数据格式。服务器目前默认采用 `application/json`。  例如: ``` application/json ```  ## 错误 服务器使用 HTTP 状态码 (status code) 来表明一个 API 请求的成功或失败状态。返回 HTTP 2XX 表明 API 请求成功。返回 HTTP 4XX 表明在请求 API 时提供了错误信息，例如参数缺失、参数错误、支付渠道错误等。返回 HTTP 5XX 表明 API 请求时，服务器发生了错误。 在返回错误的状态码时，回同时返回一些错误信息提示出错原因。  具体的错误码我们正在整理当中。  ## 分页 所有的 Justap 资源都可以被 list API 方法支持，例如分页 charges 和 refunds。这些 list API 方法拥有相同的数据结构。Justap 是基于 cursor 的分页机制，使用参数 starting_after 来决定列表从何处开始，使用参数 ending_before 来决定列表从何处结束。  ## 参数说明 请求参数中包含的以下字段释义请参考：  - REQUIRED: 必填参数 - OPTIONAL: 可选参数，可以在请求当前接口时按需传入 - CONDITIONAL: 在某些条件下必传 - RESPONSE-ONLY: 标示该参数仅在接口返回参数中出现，调用 API 时无需传入  # 如何保证幂等性 如果发生请求超时或服务器内部错误，客户端可能会尝试重发请求。您可以在请求中设置 ClientToken 参数避免多次重试带来重复操作的问题。  ## 什么是幂等性 在数学计算或者计算机科学中，幂等性（idempotence）是指相同操作或资源在一次或多次请求中具有同样效果的作用。幂等性是在分布式系统设计中具有十分重要的地位。  ## 保证幂等性 通常情况下，客户端只需要在500（InternalErrorInternalError）或503（ServiceUnavailable）错误，或者无法获取响应结果时重试。充实时您可以从客户端生成一个参数值不超过64个的ASCII字符，并将值赋予 ClientToken，保证重试请求的幂等性。  ## ClientToken 详解 ClientToken参数的详细信息如下所示。  - ClientToken 是一个由客户端生成的唯一的、大小写敏感、不超过64个ASCII字符的字符串。例如，`ClientToken=123e4567-e89b-12d3-a456-426655440000`。 - 如果您提供了一个已经使用过的 ClientToken，但其他请求参数**有变化**，则服务器会返回 IdempotentParameterMismatch 的错误代码。 - 如果您提供了一个已经使用过的 ClientToken，且其他请求参数**不变**，则服务器会尝试返回 ClientToken 对应的记录。  ## API列表 以下为部分包含了 ClientToken 参数的API，供您参考。具体哪些API支持 ClientToken 参数请以各 API 文档为准，此处不一一列举。  - [申请退款接口](https://www.justap.cn/docs#operation/TradeService_Refunds)  # 签名 为保证安全，JUSTAP 所有接口均需要对请求进行签名。服务器收到请求后进行签名的验证。如果签名验证不通过，将会拒绝处理请求，并返回 401 Unauthorized。  签名算法：  ``` base64Encode(hamc-sha256(md5(请求 body + 请求时间戳 + 一次性随机字符串) + 一次性随机字符串)) ```  ## 准备 首先需要在 Justap 创建一个应用，商户需要生成一对 RSA 密钥对，并将公钥配置到 `商户中心 -> 开发配置`。 RSA 可以使用支付宝提供的 [密钥生成工具](https://opendocs.alipay.com/common/02kipl) 来生成。  商户在使用时，可以按照下述步骤生成请求的签名。   ## 算法描述: - 在请求发送前，取完整的**请求 body** - 生成一个随机的32位字符串，得到 **一次性随机字符串** - 获取当前时间的时间戳，得到 **请求时间戳** - 在请求字符串后面拼接上 **请求时间戳** 和 **一次性随机字符串**，得到 **待 Hash 字符串** - 对 **待 Hash 字符串** 计算 md5，得到 **待签名字符串** - **待签名字符串** 后面拼接上 一次性随机字符串，得到完整的 **待签名字符串** - 使用商户 RSA 私钥，对 **待签名字符串** 计算签名，并对 结果 进行 base64 编码，即可得到 **签名**  ## 设置HTTP头 Justap 要求请求通过 自定义头部 来传递签名。具体定义如下:  ``` X-Justap-Signature: 签名 X-Justap-Request-Time: 请求时间戳 X-Justap-Nonce: 一次性随机字符串 X-Justap-Body-Hash: 待签名字符串 ```  具体的签名算法实现，可参考我们提供的各语言 SDK。  # WebHooks 
 *
 * OpenAPI spec version: 1.0
 * Contact: support@justap.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";
import {getSign} from "./helper";

const BASE_PATH = "http://127.0.0.1:21011".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface ExtraAlipayAgreementSignParamsAccessParams
 */
export interface ExtraAlipayAgreementSignParamsAccessParams {
    /**
     * 目前支持以下值：1. ALIPAYAPP （钱包h5页面签约）2. QRCODE(扫码签约)3. QRCODEORSMS(扫码签约或者短信签约)
     * @type {string}
     * @memberof ExtraAlipayAgreementSignParamsAccessParams
     */
    channel: string;
}

/**
 * 
 * @export
 * @interface ExtraAlipayAgreementSignParamsPeriodRuleParams
 */
export interface ExtraAlipayAgreementSignParamsPeriodRuleParams {
    /**
     * 扣款执行时间execute_time是周期扣款产品必填，枚举值为TIMING和FIXED
     * @type {string}
     * @memberof ExtraAlipayAgreementSignParamsPeriodRuleParams
     */
    executeTime: string;
    /**
     * 周期数period是周期扣款产品必填。与另一参数period_type组合使用确定扣款周期，例如period_type为DAY，period=90，则扣款周期为90天
     * @type {string}
     * @memberof ExtraAlipayAgreementSignParamsPeriodRuleParams
     */
    period: string;
    /**
     * 周期类型period_type是周期扣款产品必填，枚举值为DAY和MONTH
     * @type {string}
     * @memberof ExtraAlipayAgreementSignParamsPeriodRuleParams
     */
    periodType: string;
    /**
     * 单笔扣款金额single_amount是周期扣款产品必填，单位为元
     * @type {string}
     * @memberof ExtraAlipayAgreementSignParamsPeriodRuleParams
     */
    singleAmount: string;
    /**
     * 扣款总金额total_amount是周期扣款产品必填，单位为元
     * @type {string}
     * @memberof ExtraAlipayAgreementSignParamsPeriodRuleParams
     */
    totalAmount: string;
    /**
     * 扣款总笔数total_payments是周期扣款产品必填，单位为笔
     * @type {string}
     * @memberof ExtraAlipayAgreementSignParamsPeriodRuleParams
     */
    totalPayments: string;
}

/**
 * 
 * @export
 * @interface ExtraAlipayAgreementSignParamsSubMerchant
 */
export interface ExtraAlipayAgreementSignParamsSubMerchant {
    /**
     * 子商户id
     * @type {string}
     * @memberof ExtraAlipayAgreementSignParamsSubMerchant
     */
    subMerchantId: string;
    /**
     * 子商户名称
     * @type {string}
     * @memberof ExtraAlipayAgreementSignParamsSubMerchant
     */
    subMerchantName: string;
    /**
     * 子商户服务描述
     * @type {string}
     * @memberof ExtraAlipayAgreementSignParamsSubMerchant
     */
    subMerchantServiceDescription: string;
    /**
     * 子商户服务名称
     * @type {string}
     * @memberof ExtraAlipayAgreementSignParamsSubMerchant
     */
    subMerchantServiceName: string;
}

/**
 * 
 * @export
 * @interface ExtraAlipayInvoiceInfoKeyInfo
 */
export interface ExtraAlipayInvoiceInfoKeyInfo {
    /**
     * 
     * @type {string}
     * @memberof ExtraAlipayInvoiceInfoKeyInfo
     */
    invoiceMerchantName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ExtraAlipayInvoiceInfoKeyInfo
     */
    isSupportInvoice?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ExtraAlipayInvoiceInfoKeyInfo
     */
    taxNum?: string;
}

/**
 * 
 * @export
 * @interface ExtraAlipayRoyaltyInfoRoyaltyDetailInfos
 */
export interface ExtraAlipayRoyaltyInfoRoyaltyDetailInfos {
    /**
     * 分账的金额，单位为元
     * @type {string}
     * @memberof ExtraAlipayRoyaltyInfoRoyaltyDetailInfos
     */
    amount: string;
    /**
     * 分账的比例，值为20~100之间的整数，如：20，表示分账金额按20%来打分账
     * @type {string}
     * @memberof ExtraAlipayRoyaltyInfoRoyaltyDetailInfos
     */
    amountPercentage: string;
    /**
     * 分账批次号，格式为：当天日期[yyyyMMdd] + 四位流水号，如：20120220-00001
     * @type {string}
     * @memberof ExtraAlipayRoyaltyInfoRoyaltyDetailInfos
     */
    batchNo: string;
    /**
     * 分账描述信息
     * @type {string}
     * @memberof ExtraAlipayRoyaltyInfoRoyaltyDetailInfos
     */
    desc: string;
    /**
     * 商户分账的外部关联号，用于关联到每一笔分账信息，商户可自定义，如一笔分账多笔，则需要为每一笔分账都保持唯一，如果为空，则有利于商户排查问题
     * @type {string}
     * @memberof ExtraAlipayRoyaltyInfoRoyaltyDetailInfos
     */
    outRelationId: string;
    /**
     * 分账序列号，表示分账执行的顺序，必须为正整数
     * @type {string}
     * @memberof ExtraAlipayRoyaltyInfoRoyaltyDetailInfos
     */
    serialNo: string;
    /**
     * 如果转入账号类型为userId，本参数为接受分账金额的支付宝账号对应的支付宝唯一用户号。以2088开头的纯16位数字。 如果转入账号类型为bankIndex，本参数为28位的银行编号（商户和支付宝签约时确定）。如果转入账号类型为storeId，本参数为商户的门店ID。
     * @type {string}
     * @memberof ExtraAlipayRoyaltyInfoRoyaltyDetailInfos
     */
    transIn: string;
    /**
     * 接受分账金额的账户类型： userId：支付宝账号对应的支付宝唯一用户号。 bankIndex：分账到银行账户的银行编号。目前暂时只支持分账到一个银行编号。storeId：分账到门店对应的银行卡编号。默认值为userId。
     * @type {string}
     * @memberof ExtraAlipayRoyaltyInfoRoyaltyDetailInfos
     */
    transInType: string;
    /**
     * 如果转出账号类型为userId，本参数为要分账的支付宝账号对应的支付宝唯一用户号。以2088开头的纯16位数字。
     * @type {string}
     * @memberof ExtraAlipayRoyaltyInfoRoyaltyDetailInfos
     */
    transOut: string;
    /**
     * 要分账的账户类型。目前只支持userId：支付宝账号对应的支付宝唯一用户号。默认值为userId。
     * @type {string}
     * @memberof ExtraAlipayRoyaltyInfoRoyaltyDetailInfos
     */
    transOutType: string;
}

/**
 * 
 * @export
 * @interface ExtraAlipaySettleInfoSettleDetailInfos
 */
export interface ExtraAlipaySettleInfoSettleDetailInfos {
    /**
     * 
     * @type {string}
     * @memberof ExtraAlipaySettleInfoSettleDetailInfos
     */
    amount?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtraAlipaySettleInfoSettleDetailInfos
     */
    settleEntityId?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtraAlipaySettleInfoSettleDetailInfos
     */
    settleEntityType?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtraAlipaySettleInfoSettleDetailInfos
     */
    summaryDimension?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtraAlipaySettleInfoSettleDetailInfos
     */
    transIn?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtraAlipaySettleInfoSettleDetailInfos
     */
    transInType?: string;
}

/**
 * 
 * @export
 * @interface ExtraWechatpayDetailGoodsDetail
 */
export interface ExtraWechatpayDetailGoodsDetail {
    /**
     * 
     * @type {string}
     * @memberof ExtraWechatpayDetailGoodsDetail
     */
    wechatpayGoodsId?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtraWechatpayDetailGoodsDetail
     */
    goodsName?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtraWechatpayDetailGoodsDetail
     */
    merchantGoodsId?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtraWechatpayDetailGoodsDetail
     */
    quantity?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtraWechatpayDetailGoodsDetail
     */
    unitPrice?: string;
}

/**
 * 
 * @export
 * @interface ExtraWechatpaySceneInfoH5Info
 */
export interface ExtraWechatpaySceneInfoH5Info {
    /**
     * 
     * @type {string}
     * @memberof ExtraWechatpaySceneInfoH5Info
     */
    appName?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtraWechatpaySceneInfoH5Info
     */
    appUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtraWechatpaySceneInfoH5Info
     */
    bundleId?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtraWechatpaySceneInfoH5Info
     */
    packageName?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtraWechatpaySceneInfoH5Info
     */
    type?: string;
}

/**
 * 
 * @export
 * @interface ExtraWechatpaySceneInfoStoreInfo
 */
export interface ExtraWechatpaySceneInfoStoreInfo {
    /**
     * 
     * @type {string}
     * @memberof ExtraWechatpaySceneInfoStoreInfo
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtraWechatpaySceneInfoStoreInfo
     */
    areaCode?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtraWechatpaySceneInfoStoreInfo
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtraWechatpaySceneInfoStoreInfo
     */
    name?: string;
}

/**
 * 
 * @export
 * @interface OpenApiRoyaltyDetailInfoPojoTradeFundBillItem
 */
export interface OpenApiRoyaltyDetailInfoPojoTradeFundBillItem {
    /**
     * 金额
     * @type {number}
     * @memberof OpenApiRoyaltyDetailInfoPojoTradeFundBillItem
     */
    amount: number;
    /**
     * 资金渠道
     * @type {string}
     * @memberof OpenApiRoyaltyDetailInfoPojoTradeFundBillItem
     */
    fundChannel: string;
    /**
     * 渠道所使用的资金类型
     * @type {string}
     * @memberof OpenApiRoyaltyDetailInfoPojoTradeFundBillItem
     */
    fundType: string;
    /**
     * 渠道实际付款金额
     * @type {number}
     * @memberof OpenApiRoyaltyDetailInfoPojoTradeFundBillItem
     */
    realAmount: number;
}

/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.  Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.  Example 1: Pack and unpack a message in C++.      Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     }  Example 2: Pack and unpack a message in Java.      Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }   Example 3: Pack and unpack a message in Python.      foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...   Example 4: Pack and unpack a message in Go       foo := &pb.Foo{...}      any, err := anypb.New(foo)      if err != nil {        ...      }      ...      foo := &pb.Foo{}      if err := any.UnmarshalTo(foo); err != nil {        ...      }  The pack methods provided by protobuf library will by default use 'type.googleapis.com/full.type.name' as the type URL and the unpack methods only use the fully qualified type name after the last '/' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\".   JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:      package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }      {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     }  If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):      {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    [key: string]: any | any;

    /**
     * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
     * @type {string}
     * @memberof ProtobufAny
     */
    type?: string;
}

/**
 * 
 * @export
 * @interface QueryChargeListRequestCreated
 */
export interface QueryChargeListRequestCreated {
    /**
     * 小于 charge 对象的创建时间，用 Unix 时间戳表示
     * @type {number}
     * @memberof QueryChargeListRequestCreated
     */
    gt: number;
    /**
     * 小于或等于 charge 对象的创建时间，用 Unix 时间戳表示
     * @type {number}
     * @memberof QueryChargeListRequestCreated
     */
    gte: number;
    /**
     * 大于 charge 对象的创建时间，用 Unix 时间戳表示
     * @type {number}
     * @memberof QueryChargeListRequestCreated
     */
    lt: number;
    /**
     * 大于或等于 charge 对象的创建时间，用 Unix 时间戳表示
     * @type {number}
     * @memberof QueryChargeListRequestCreated
     */
    lte: number;
}

/**
 * 
 * @export
 * @interface RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo
 */
export interface RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo {
    /**
     * 分账的金额，单位为元
     * @type {number}
     * @memberof RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo
     */
    amount: number;
    /**
     * 买家支付宝账号
     * @type {string}
     * @memberof RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo
     */
    buyerLogonId: string;
    /**
     * 买家在支付宝的用户id
     * @type {string}
     * @memberof RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo
     */
    buyerUserId: string;
    /**
     * 分账描述
     * @type {string}
     * @memberof RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo
     */
    desc: string;
    /**
     * 分账变更消息
     * @type {string}
     * @memberof RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo
     */
    fundChange: string;
    /**
     * 退款使用的资金渠道
     * @type {Array<OpenApiRoyaltyDetailInfoPojoTradeFundBillItem>}
     * @memberof RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo
     */
    refundDetailItemList?: Array<OpenApiRoyaltyDetailInfoPojoTradeFundBillItem>;
    /**
     * 总退款金额
     * @type {number}
     * @memberof RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo
     */
    refundFee: number;
    /**
     * 可选值：达人佣金、平台服务费、技术服务费、其他
     * @type {string}
     * @memberof RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo
     */
    royaltyScene: string;
    /**
     * 分账类型
     * @type {string}
     * @memberof RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo
     */
    royaltyType: string;
    /**
     * 买家实际退款金额
     * @type {string}
     * @memberof RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo
     */
    sendBackFee: string;
    /**
     * 交易场景
     * @type {string}
     * @memberof RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo
     */
    storeName: string;
    /**
     * 收入方账户
     * @type {string}
     * @memberof RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo
     */
    transIn: string;
    /**
     * 分账收款方姓名
     * @type {string}
     * @memberof RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo
     */
    transInName: string;
    /**
     * 收入方账户类型
     * @type {string}
     * @memberof RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo
     */
    transInType: string;
    /**
     * 支出方账户
     * @type {string}
     * @memberof RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo
     */
    transOut: string;
    /**
     * 支出方账户类型
     * @type {string}
     * @memberof RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo
     */
    transOutType: string;
}

/**
 * 
 * @export
 * @interface RefundExtraWechatPayAccount
 */
export interface RefundExtraWechatPayAccount {
    /**
     * 退款出资账户及金额
     * @type {Array<RefundExtraWechatPayAccount>}
     * @memberof RefundExtraWechatPayAccount
     */
    from?: Array<RefundExtraWechatPayAccount>;
}

/**
 * 
 * @export
 * @interface RefundExtraWechatPayGoodsDetailItem
 */
export interface RefundExtraWechatPayGoodsDetailItem {
    /**
     * 商品名称, 商品的实际名称
     * @type {string}
     * @memberof RefundExtraWechatPayGoodsDetailItem
     */
    goodsName: string;
    /**
     * 商户侧商品编码, 由半角的大小写字母、数字、中划线、下划线中的一种或几种组成
     * @type {string}
     * @memberof RefundExtraWechatPayGoodsDetailItem
     */
    merchantGoodsId: string;
    /**
     * 商品退款金额，单位为分
     * @type {number}
     * @memberof RefundExtraWechatPayGoodsDetailItem
     */
    refundAmount: number;
    /**
     *  单品的退款数量
     * @type {number}
     * @memberof RefundExtraWechatPayGoodsDetailItem
     */
    refundQuantity: number;
    /**
     * 商品单价金额，单位为分
     * @type {number}
     * @memberof RefundExtraWechatPayGoodsDetailItem
     */
    unitPrice: number;
    /**
     * 微信支付商品编码, 微信支付定义的统一商品编号（没有可不传）
     * @type {string}
     * @memberof RefundExtraWechatPayGoodsDetailItem
     */
    wechatpayGoodsId: string;
}

/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    code?: number;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    details?: Array<ProtobufAny>;
    /**
     * 
     * @type {string}
     * @memberof RpcStatus
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface V1AlipayCallbackResponse
 */
export interface V1AlipayCallbackResponse {
    /**
     * 
     * @type {string}
     * @memberof V1AlipayCallbackResponse
     */
    callbackUrl?: string;
}

/**
 * 
 * @export
 * @interface V1AlipayNotifyResponse
 */
export interface V1AlipayNotifyResponse {
    /**
     * 
     * @type {boolean}
     * @memberof V1AlipayNotifyResponse
     */
    success?: boolean;
}

/**
 * - BALANCE: 余额支付  - AlipayQR: 支付宝扫码支付  - AlipayScan: 支付宝条码支付  - AlipayApp: 支付宝 App 支付  - AlipayWap: 支付宝手机网站支付  - AlipayPage: 支付宝电脑网站支付  - AlipayFace: 支付宝刷脸支付  - AlipayLite: 支付宝小程序支付  - WechatpayApp: 微信 App 支付  - WechatpayJSAPI: 微信 JSAPI 支付  - WechatpayH5: 微信 H5 支付  - WechatpayNative: 微信 Native 支付  - WechatpayLite: 微信小程序支付  - WechatpayFace: 刷脸支付  - WechatpayScan: 微信付款码支付
 * @export
 * @enum {string}
 */
export enum V1Channel {
    CHANNELINVALIDUNSPECIFIED = <any> 'CHANNEL_INVALID_UNSPECIFIED',
    BALANCE = <any> 'BALANCE',
    AlipayQR = <any> 'AlipayQR',
    AlipayScan = <any> 'AlipayScan',
    AlipayApp = <any> 'AlipayApp',
    AlipayWap = <any> 'AlipayWap',
    AlipayPage = <any> 'AlipayPage',
    AlipayFace = <any> 'AlipayFace',
    AlipayLite = <any> 'AlipayLite',
    WechatpayApp = <any> 'WechatpayApp',
    WechatpayJSAPI = <any> 'WechatpayJSAPI',
    WechatpayH5 = <any> 'WechatpayH5',
    WechatpayNative = <any> 'WechatpayNative',
    WechatpayLite = <any> 'WechatpayLite',
    WechatpayFace = <any> 'WechatpayFace',
    WechatpayScan = <any> 'WechatpayScan'
}

/**
 * 
 * @export
 * @interface V1Charge
 */
export interface V1Charge {
    /**
     * 订单金额
     * @type {number}
     * @memberof V1Charge
     */
    amount: number;
    /**
     * 下单金额
     * @type {number}
     * @memberof V1Charge
     */
    amountFee: number;
    /**
     * 订单退款总金额
     * @type {number}
     * @memberof V1Charge
     */
    amountRefund: number;
    /**
     * 分账金额
     * @type {number}
     * @memberof V1Charge
     */
    amountRoyalty: number;
    /**
     * 结算金额，不一定有，视支付通道情况返回
     * @type {number}
     * @memberof V1Charge
     */
    amountSettle: number;
    /**
     * 应用ID
     * @type {string}
     * @memberof V1Charge
     */
    appId: string;
    /**
     * 订单描述信息
     * @type {string}
     * @memberof V1Charge
     */
    body: string;
    /**
     * 支付渠道
     * @type {V1Channel}
     * @memberof V1Charge
     */
    channel: V1Channel;
    /**
     * Charge 对象 id
     * @type {string}
     * @memberof V1Charge
     */
    chargeId: string;
    /**
     * 顾客IP
     * @type {string}
     * @memberof V1Charge
     */
    clientIp: string;
    /**
     * 是否关闭
     * @type {boolean}
     * @memberof V1Charge
     */
    closed: boolean;
    /**
     * 关闭时间
     * @type {Date}
     * @memberof V1Charge
     */
    closedAt?: Date;
    /**
     * Charge 对象创建时间
     * @type {Date}
     * @memberof V1Charge
     */
    createdAt?: Date;
    /**
     * 支付凭证
     * @type {ProtobufAny}
     * @memberof V1Charge
     */
    credential?: ProtobufAny;
    /**
     * 货币单位，当前仅支持 CNY
     * @type {string}
     * @memberof V1Charge
     */
    currency: string;
    /**
     * 描述信息
     * @type {string}
     * @memberof V1Charge
     */
    description: string;
    /**
     * 支付渠道元数据
     * @type {V1ChargeExtra}
     * @memberof V1Charge
     */
    extra?: V1ChargeExtra;
    /**
     * 收单机构错误码
     * @type {string}
     * @memberof V1Charge
     */
    failureCode: string;
    /**
     * 收单机构错误描述信息
     * @type {string}
     * @memberof V1Charge
     */
    failureMsg: string;
    /**
     * 表明是否是沙箱环境
     * @type {boolean}
     * @memberof V1Charge
     */
    liveMode: boolean;
    /**
     * 商户系统订单号，APP下需唯一
     * @type {string}
     * @memberof V1Charge
     */
    merchantTradeId: string;
    /**
     * 订单元数据，原样返回
     * @type {{ [key: string]: string; }}
     * @memberof V1Charge
     */
    metadata?: { [key: string]: string; };
    /**
     * 表明是否已支付
     * @type {boolean}
     * @memberof V1Charge
     */
    paid: boolean;
    /**
     * 支付时间
     * @type {Date}
     * @memberof V1Charge
     */
    paidAt?: Date;
    /**
     * 表明是否包含退款，含退款失败的
     * @type {boolean}
     * @memberof V1Charge
     */
    refunded: boolean;
    /**
     * Refund 对象列表
     * @type {Array<V1Refund>}
     * @memberof V1Charge
     */
    refunds?: Array<V1Refund>;
    /**
     * 表明是否已经撤销
     * @type {boolean}
     * @memberof V1Charge
     */
    reversed: boolean;
    /**
     * 冲正时间
     * @type {Date}
     * @memberof V1Charge
     */
    reversedAt?: Date;
    /**
     * 订单描述主题
     * @type {string}
     * @memberof V1Charge
     */
    subject: string;
    /**
     * 订单过期时间
     * @type {Date}
     * @memberof V1Charge
     */
    timeExpire?: Date;
    /**
     * Charge 的支付单号
     * @type {string}
     * @memberof V1Charge
     */
    transactionNo: string;
    /**
     * 订单生存时间，单位秒
     * @type {number}
     * @memberof V1Charge
     */
    ttl: number;
}

/**
 * 
 * @export
 * @interface V1ChargeExtra
 */
export interface V1ChargeExtra {
    /**
     * 支付宝 App 支付渠道元数据
     * @type {V1ExtraAlipayApp}
     * @memberof V1ChargeExtra
     */
    alipayApp?: V1ExtraAlipayApp;
    /**
     * 支付宝 刷脸 支付渠道元数据
     * @type {V1ExtraAlipayFace}
     * @memberof V1ChargeExtra
     */
    alipayFace?: V1ExtraAlipayFace;
    /**
     * 支付宝 小程序 支付渠道元数据
     * @type {V1ExtraAlipayLite}
     * @memberof V1ChargeExtra
     */
    alipayLite?: V1ExtraAlipayLite;
    /**
     * 支付宝 电脑网站 支付渠道元数据
     * @type {V1ExtraAlipayPage}
     * @memberof V1ChargeExtra
     */
    alipayPage?: V1ExtraAlipayPage;
    /**
     * 支付宝 当面付 支付渠道元数据
     * @type {V1ExtraAlipayQr}
     * @memberof V1ChargeExtra
     */
    alipayQr?: V1ExtraAlipayQr;
    /**
     * 支付宝 扫码(被扫) 支付渠道元数据
     * @type {V1ExtraAlipayScan}
     * @memberof V1ChargeExtra
     */
    alipayScan?: V1ExtraAlipayScan;
    /**
     * 支付宝 手机网站 支付渠道元数据
     * @type {V1ExtraAlipayWap}
     * @memberof V1ChargeExtra
     */
    alipayWap?: V1ExtraAlipayWap;
    /**
     * 微信支付 App 支付渠道元数据
     * @type {V1ExtraWechatpayApp}
     * @memberof V1ChargeExtra
     */
    wechatpayApp?: V1ExtraWechatpayApp;
    /**
     * 微信支付 H5 支付渠道元数据
     * @type {V1ExtraWechatpayH5}
     * @memberof V1ChargeExtra
     */
    wechatpayH5?: V1ExtraWechatpayH5;
    /**
     * 微信支付 公众号 支付渠道元数据
     * @type {V1ExtraWechatpayJsapi}
     * @memberof V1ChargeExtra
     */
    wechatpayJsapi?: V1ExtraWechatpayJsapi;
    /**
     * 微信支付 小程序 支付渠道元数据
     * @type {V1ExtraWechatpayLite}
     * @memberof V1ChargeExtra
     */
    wechatpayLite?: V1ExtraWechatpayLite;
    /**
     * 微信支付 扫码(被扫) 支付渠道元数据
     * @type {V1ExtraWechatpayNative}
     * @memberof V1ChargeExtra
     */
    wechatpayNative?: V1ExtraWechatpayNative;
    /**
     * 微信支付 扫码(被扫) 支付渠道元数据
     * @type {V1ExtraWechatpayScan}
     * @memberof V1ChargeExtra
     */
    wechatpayScan?: V1ExtraWechatpayScan;
}

/**
 * 返回一个已存在的 charge 对象列表或者一个错误
 * @export
 * @interface V1ChargeListResponse
 */
export interface V1ChargeListResponse {
    /**
     * 包含一个由请求参数分页后的返回对象实体
     * @type {Array<V1Charge>}
     * @memberof V1ChargeListResponse
     */
    data?: Array<V1Charge>;
    /**
     * 表明获取列表之后是否还有更多的元素实体。如果值为 false，表明当前页是最后一页
     * @type {boolean}
     * @memberof V1ChargeListResponse
     */
    hasMore: boolean;
    /**
     * 对象类型
     * @type {string}
     * @memberof V1ChargeListResponse
     */
    object: string;
}

/**
 * 返回一个支付凭据 charge 对象。
 * @export
 * @interface V1ChargeResponse
 */
export interface V1ChargeResponse {
    /**
     * Charge 对象
     * @type {V1Charge}
     * @memberof V1ChargeResponse
     */
    data?: V1Charge;
    /**
     * 对象类型
     * @type {string}
     * @memberof V1ChargeResponse
     */
    object: string;
}

/**
 * 你可以创建一个 charge 对象向用户收款。charge 是一个支付凭据对象，所有和支付相关的要素信息都存储在这个对象中，你的服务端可以通过发起支付请求来创建一个新的 charge 对象，也可以随时查询一个或者多个 charge 对象的状态。每个 charge 对象都拥有一个标识 id，该 id 在系统内唯一。
 * @export
 * @interface V1CreateChargeRequest
 */
export interface V1CreateChargeRequest {
    /**
     * [REQUIRED] 订单金额，单位元， 如 0.01
     * @type {number}
     * @memberof V1CreateChargeRequest
     */
    amount: number;
    /**
     * [REQUIRED] 应用 id
     * @type {string}
     * @memberof V1CreateChargeRequest
     */
    appId: string;
    /**
     * [REQUIRED] 服务明细
     * @type {string}
     * @memberof V1CreateChargeRequest
     */
    body: string;
    /**
     * [OPTIONAL] 回调地址，如不传则使用 APP 设置中的回调地址。若都为空，则无法跳回原页面
     * @type {string}
     * @memberof V1CreateChargeRequest
     */
    callbackUrl: string;
    /**
     * [REQUIRED] 渠道名称
     * @type {V1Channel}
     * @memberof V1CreateChargeRequest
     */
    channel: V1Channel;
    /**
     * [REQUIRED] 客户端机器 IP
     * @type {string}
     * @memberof V1CreateChargeRequest
     */
    clientIp: string;
    /**
     * 货币单位。国内收单机构仅支持 CNY
     * @type {string}
     * @memberof V1CreateChargeRequest
     */
    currency: string;
    /**
     * [OPTIONAL] 交易描述
     * @type {string}
     * @memberof V1CreateChargeRequest
     */
    description: string;
    /**
     * [OPTIONAL] 各支付渠道元数据
     * @type {V1CreateChargeRequestExtra}
     * @memberof V1CreateChargeRequest
     */
    extra?: V1CreateChargeRequestExtra;
    /**
     * [REQUIRED] 客户系统的交易单号（订单号），必须在应用下唯一。长度不超过30个字符
     * @type {string}
     * @memberof V1CreateChargeRequest
     */
    merchantTradeId: string;
    /**
     * [OPTIONAL] 订单元数据，原样返回
     * @type {{ [key: string]: string; }}
     * @memberof V1CreateChargeRequest
     */
    metadata?: { [key: string]: string; };
    /**
     * [OPTIONAL] 接受通知服务器所在区域，为确保消息能够送达，请选择服务器所在国家的国家码。如不填默认为 CN
     * @type {string}
     * @memberof V1CreateChargeRequest
     */
    notificationArea: string;
    /**
     * [OPTIONAL] 通知地址，如不传则使用 APP 设置中的通知地址。若都为空，则不发送通知
     * @type {string}
     * @memberof V1CreateChargeRequest
     */
    notifyUrl: string;
    /**
     * [REQUIRED] 物品或服务名称（交易标题）
     * @type {string}
     * @memberof V1CreateChargeRequest
     */
    subject: string;
    /**
     * [OPTIONAL] 订单超时时间，单位秒
     * @type {number}
     * @memberof V1CreateChargeRequest
     */
    ttl: number;
}

/**
 * 
 * @export
 * @interface V1CreateChargeRequestExtra
 */
export interface V1CreateChargeRequestExtra {
    /**
     * 支付宝 APP 支付元数据
     * @type {V1ExtraAlipayApp}
     * @memberof V1CreateChargeRequestExtra
     */
    alipayApp?: V1ExtraAlipayApp;
    /**
     * 支付宝刷脸支付元数据
     * @type {V1ExtraAlipayFace}
     * @memberof V1CreateChargeRequestExtra
     */
    alipayFace?: V1ExtraAlipayFace;
    /**
     * 支付宝小程序支付元数据
     * @type {V1ExtraAlipayLite}
     * @memberof V1CreateChargeRequestExtra
     */
    alipayLite?: V1ExtraAlipayLite;
    /**
     * 支付宝电脑网站支付元数据
     * @type {V1ExtraAlipayPage}
     * @memberof V1CreateChargeRequestExtra
     */
    alipayPage?: V1ExtraAlipayPage;
    /**
     * 支付宝二维码支付元数据
     * @type {V1ExtraAlipayQr}
     * @memberof V1CreateChargeRequestExtra
     */
    alipayQr?: V1ExtraAlipayQr;
    /**
     * 支付宝扫码（被扫）支付元数据
     * @type {V1ExtraAlipayScan}
     * @memberof V1CreateChargeRequestExtra
     */
    alipayScan?: V1ExtraAlipayScan;
    /**
     * 支付宝手机网站支付元数据
     * @type {V1ExtraAlipayWap}
     * @memberof V1CreateChargeRequestExtra
     */
    alipayWap?: V1ExtraAlipayWap;
    /**
     * 微信支付 APP 支付元数据
     * @type {V1ExtraWechatpayApp}
     * @memberof V1CreateChargeRequestExtra
     */
    wechatpayApp?: V1ExtraWechatpayApp;
    /**
     * 微信支付 H5 支付元数据
     * @type {V1ExtraWechatpayH5}
     * @memberof V1CreateChargeRequestExtra
     */
    wechatpayH5?: V1ExtraWechatpayH5;
    /**
     * 微信支付 JSAPI 支付元数据
     * @type {V1ExtraWechatpayJsapi}
     * @memberof V1CreateChargeRequestExtra
     */
    wechatpayJsapi?: V1ExtraWechatpayJsapi;
    /**
     * 微信支付小程序支付元数据
     * @type {V1ExtraWechatpayLite}
     * @memberof V1CreateChargeRequestExtra
     */
    wechatpayLite?: V1ExtraWechatpayLite;
    /**
     * 微信支付二维码支付元数据
     * @type {V1ExtraWechatpayNative}
     * @memberof V1CreateChargeRequestExtra
     */
    wechatpayNative?: V1ExtraWechatpayNative;
    /**
     * 微信支付扫码（被扫）支付元数据
     * @type {V1ExtraWechatpayScan}
     * @memberof V1CreateChargeRequestExtra
     */
    wechatpayScan?: V1ExtraWechatpayScan;
}

/**
 * 通过发起一次退款请求创建一个新的 refund 对象，只能对已经发生交易并且没有全额退款的 charge 对象发起退款。当进行全额退款之前，可以进行多次退款，直至全额退款。当一次退款成功后，会发送 Webhooks 通知。
 * @export
 * @interface V1CreateRefundRequest
 */
export interface V1CreateRefundRequest {
    /**
     * [OPTIONAL] 退款金额大于 0, 单位为对应币种的最小货币单位，例如：人民币为分（如退款金额为 1 元，此处请填 100）。必须小于等于可退款金额，默认为全额退款。
     * @type {number}
     * @memberof V1CreateRefundRequest
     */
    amount: number;
    /**
     * [REQUIRED] 应用 id
     * @type {string}
     * @memberof V1CreateRefundRequest
     */
    appId: string;
    /**
     * [REQUIRED] 支付 Charge Id
     * @type {string}
     * @memberof V1CreateRefundRequest
     */
    chargeId: string;
    /**
     * [REQUIRED] 退款原因，最多 255 个 Unicode 字符。
     * @type {string}
     * @memberof V1CreateRefundRequest
     */
    description: string;
    /**
     * [OPTIONAL] 退款 extra 参数。
     * @type {ProtobufAny}
     * @memberof V1CreateRefundRequest
     */
    extra?: ProtobufAny;
    /**
     * [REQUIRED] 商户系统的退款单号，必须保证唯一。由于 charge 支持多次退款，对于失败重试动作确保使用相同的订单号，以避免重复退款造成损失。
     * @type {string}
     * @memberof V1CreateRefundRequest
     */
    merchantRefundId: string;
    /**
     * [OPTIONAL] 参考元数据。
     * @type {{ [key: string]: string; }}
     * @memberof V1CreateRefundRequest
     */
    metadata?: { [key: string]: string; };
}

/**
 * 
 * @export
 * @interface V1ExtraAlipayAgreementParams
 */
export interface V1ExtraAlipayAgreementParams {
    /**
     * 
     * @type {string}
     * @memberof V1ExtraAlipayAgreementParams
     */
    agreementNo?: string;
    /**
     * 
     * @type {string}
     * @memberof V1ExtraAlipayAgreementParams
     */
    applyToken?: string;
    /**
     * 
     * @type {string}
     * @memberof V1ExtraAlipayAgreementParams
     */
    authConfirmNo?: string;
}

/**
 * 
 * @export
 * @interface V1ExtraAlipayAgreementSignParams
 */
export interface V1ExtraAlipayAgreementSignParams {
    /**
     * 请按当前接入的方式进行填充，且输入值必须为文档中的参数取值范围
     * @type {ExtraAlipayAgreementSignParamsAccessParams}
     * @memberof V1ExtraAlipayAgreementSignParams
     */
    accessParams?: ExtraAlipayAgreementSignParamsAccessParams;
    /**
     * 外部协议号
     * @type {string}
     * @memberof V1ExtraAlipayAgreementSignParams
     */
    externalAgreementNo: string;
    /**
     * 外部用户唯一标识
     * @type {string}
     * @memberof V1ExtraAlipayAgreementSignParams
     */
    externalLogonId: string;
    /**
     * 周期管控规则参数period_rule_params，在签约周期扣款产品（如CYCLE_PAY_AUTH_P）时必传，在签约其他产品时无需传入。 周期扣款产品，会按照这里传入的参数提示用户，并对发起扣款的时间、金额、次数等做相应限制。
     * @type {ExtraAlipayAgreementSignParamsPeriodRuleParams}
     * @memberof V1ExtraAlipayAgreementSignParams
     */
    periodRuleParams?: ExtraAlipayAgreementSignParamsPeriodRuleParams;
    /**
     * 个人签约产品码
     * @type {string}
     * @memberof V1ExtraAlipayAgreementSignParams
     */
    personalProductCode: string;
    /**
     * 签约回调地址
     * @type {string}
     * @memberof V1ExtraAlipayAgreementSignParams
     */
    signNotifyUrl: string;
    /**
     * 签约场景
     * @type {string}
     * @memberof V1ExtraAlipayAgreementSignParams
     */
    signScene: string;
    /**
     * 此参数用于传递子商户信息，无特殊需求时不用关注。目前商户代扣、海外代扣、淘旅行信用住产品支持传入该参数（在销售方案中“是否允许自定义子商户信息”需要选是）。
     * @type {ExtraAlipayAgreementSignParamsSubMerchant}
     * @memberof V1ExtraAlipayAgreementSignParams
     */
    subMerchant?: ExtraAlipayAgreementSignParamsSubMerchant;
}

/**
 * 
 * @export
 * @interface V1ExtraAlipayApp
 */
export interface V1ExtraAlipayApp {
    /**
     * 签约参数。如果希望在sdk中支付并签约，需要在这里传入签约信息。周期扣款场景 product_code 为 CYCLE_PAY_AUTH 时必填。
     * @type {V1ExtraAlipayAgreementSignParams}
     * @memberof V1ExtraAlipayApp
     */
    agreementSignParams?: V1ExtraAlipayAgreementSignParams;
    /**
     * [ONLY IN RESPONSE] 信用支付协议号
     * @type {string}
     * @memberof V1ExtraAlipayApp
     */
    creditAgreementId: string;
    /**
     * [ONLY IN RESPONSE] 信用支付业务订单号
     * @type {string}
     * @memberof V1ExtraAlipayApp
     */
    creditBizOrderId: string;
    /**
     * [ONLY IN RESPONSE] 信用支付模式
     * @type {string}
     * @memberof V1ExtraAlipayApp
     */
    creditPayMode: string;
    /**
     * 禁用渠道
     * @type {string}
     * @memberof V1ExtraAlipayApp
     */
    disablePayChannels: string;
    /**
     * 可用渠道
     * @type {string}
     * @memberof V1ExtraAlipayApp
     */
    enablePayChannels: string;
    /**
     * 外部指定买家
     * @type {V1ExtraAlipayExtUserInfo}
     * @memberof V1ExtraAlipayApp
     */
    extUserInfo?: V1ExtraAlipayExtUserInfo;
    /**
     * 业务扩展参数
     * @type {V1ExtraAlipayExtendParams}
     * @memberof V1ExtraAlipayApp
     */
    extendParams?: V1ExtraAlipayExtendParams;
    /**
     * 商品明细列表
     * @type {Array<V1ExtraAlipayGoodsDetail>}
     * @memberof V1ExtraAlipayApp
     */
    goodsDetail?: Array<V1ExtraAlipayGoodsDetail>;
    /**
     * 商品类型
     * @type {string}
     * @memberof V1ExtraAlipayApp
     */
    goodsType: string;
    /**
     * [ONLY IN RESPONSE] 商户订单号
     * @type {string}
     * @memberof V1ExtraAlipayApp
     */
    merchantTradeId: string;
    /**
     * [ONLY IN RESPONSE] App 用于拉起支付的请求字符串
     * @type {string}
     * @memberof V1ExtraAlipayApp
     */
    payParam: string;
    /**
     * 销售产品码，商家和支付宝签约的产品码
     * @type {string}
     * @memberof V1ExtraAlipayApp
     */
    productCode: string;
    /**
     * [ONLY IN RESPONSE] 支付宝卖家支付宝用户ID
     * @type {string}
     * @memberof V1ExtraAlipayApp
     */
    sellerId: string;
    /**
     * 商户门店编号
     * @type {string}
     * @memberof V1ExtraAlipayApp
     */
    storeId: string;
}

/**
 * 
 * @export
 * @interface V1ExtraAlipayBusinessParams
 */
export interface V1ExtraAlipayBusinessParams {
    /**
     * 
     * @type {string}
     * @memberof V1ExtraAlipayBusinessParams
     */
    actualOrderTime?: string;
    /**
     * 
     * @type {string}
     * @memberof V1ExtraAlipayBusinessParams
     */
    campusCard?: string;
    /**
     * 
     * @type {string}
     * @memberof V1ExtraAlipayBusinessParams
     */
    cardType?: string;
    /**
     * 
     * @type {string}
     * @memberof V1ExtraAlipayBusinessParams
     */
    goodTaxes?: string;
}

/**
 * 
 * @export
 * @interface V1ExtraAlipayExtUserInfo
 */
export interface V1ExtraAlipayExtUserInfo {
    /**
     * 真实用户的证件号码
     * @type {string}
     * @memberof V1ExtraAlipayExtUserInfo
     */
    certNo: string;
    /**
     * 真实用户的证件类型
     * @type {string}
     * @memberof V1ExtraAlipayExtUserInfo
     */
    certType: string;
    /**
     * 是否是实名用户
     * @type {string}
     * @memberof V1ExtraAlipayExtUserInfo
     */
    fixBuyer: string;
    /**
     * 真实用户的证件有效期的起始时间
     * @type {string}
     * @memberof V1ExtraAlipayExtUserInfo
     */
    minAge: string;
    /**
     * 真实用户的手机号码
     * @type {string}
     * @memberof V1ExtraAlipayExtUserInfo
     */
    mobile: string;
    /**
     * 真实用户的姓名
     * @type {string}
     * @memberof V1ExtraAlipayExtUserInfo
     */
    name: string;
    /**
     * 是否需要补充身份信息
     * @type {string}
     * @memberof V1ExtraAlipayExtUserInfo
     */
    needCheckInfo: string;
}

/**
 * 
 * @export
 * @interface V1ExtraAlipayExtendParams
 */
export interface V1ExtraAlipayExtendParams {
    /**
     * 卡类型
     * @type {string}
     * @memberof V1ExtraAlipayExtendParams
     */
    cardType: string;
    /**
     * 使用花呗分期要进行的分期数
     * @type {string}
     * @memberof V1ExtraAlipayExtendParams
     */
    hbFqNum: string;
    /**
     * 使用花呗分期需要卖家承担的手续费比例的百分值，传入100代表100%
     * @type {number}
     * @memberof V1ExtraAlipayExtendParams
     */
    hbFqSellerPercent: number;
    /**
     * 行业数据回流信息
     * @type {string}
     * @memberof V1ExtraAlipayExtendParams
     */
    industryRefluxInfo: string;
    /**
     * 指定收款支付宝用户名
     * @type {string}
     * @memberof V1ExtraAlipayExtendParams
     */
    specifiedSellerName: string;
    /**
     * 系统商编号，该参数作为系统商返佣数据提取的依据，请填写系统商签约协议的PID
     * @type {string}
     * @memberof V1ExtraAlipayExtendParams
     */
    sysServiceProviderId: string;
}

/**
 * 
 * @export
 * @interface V1ExtraAlipayFace
 */
export interface V1ExtraAlipayFace {
}

/**
 * 
 * @export
 * @interface V1ExtraAlipayFundBillList
 */
export interface V1ExtraAlipayFundBillList {
    /**
     * 
     * @type {string}
     * @memberof V1ExtraAlipayFundBillList
     */
    amount?: string;
    /**
     * 
     * @type {string}
     * @memberof V1ExtraAlipayFundBillList
     */
    fundChannel?: string;
    /**
     * 
     * @type {string}
     * @memberof V1ExtraAlipayFundBillList
     */
    realAmount?: string;
}

/**
 * 
 * @export
 * @interface V1ExtraAlipayGoodsDetail
 */
export interface V1ExtraAlipayGoodsDetail {
    /**
     * 支付宝商品编号
     * @type {string}
     * @memberof V1ExtraAlipayGoodsDetail
     */
    alipayGoodsId: string;
    /**
     * 商品描述
     * @type {string}
     * @memberof V1ExtraAlipayGoodsDetail
     */
    body: string;
    /**
     * 商品类目树
     * @type {string}
     * @memberof V1ExtraAlipayGoodsDetail
     */
    categoriesTree: string;
    /**
     * 商品类目
     * @type {string}
     * @memberof V1ExtraAlipayGoodsDetail
     */
    goodsCategory: string;
    /**
     * 商品编号
     * @type {string}
     * @memberof V1ExtraAlipayGoodsDetail
     */
    goodsId: string;
    /**
     * 商品名称
     * @type {string}
     * @memberof V1ExtraAlipayGoodsDetail
     */
    goodsName: string;
    /**
     * 价格
     * @type {number}
     * @memberof V1ExtraAlipayGoodsDetail
     */
    price: number;
    /**
     * 商品数量
     * @type {number}
     * @memberof V1ExtraAlipayGoodsDetail
     */
    quantity: number;
    /**
     * 商品显示链接
     * @type {string}
     * @memberof V1ExtraAlipayGoodsDetail
     */
    showUrl: string;
}

/**
 * 
 * @export
 * @interface V1ExtraAlipayInvoiceInfo
 */
export interface V1ExtraAlipayInvoiceInfo {
    /**
     * 
     * @type {string}
     * @memberof V1ExtraAlipayInvoiceInfo
     */
    details?: string;
    /**
     * 
     * @type {ExtraAlipayInvoiceInfoKeyInfo}
     * @memberof V1ExtraAlipayInvoiceInfo
     */
    keyInfo?: ExtraAlipayInvoiceInfoKeyInfo;
}

/**
 * 
 * @export
 * @interface V1ExtraAlipayLite
 */
export interface V1ExtraAlipayLite {
    /**
     * 商品描述
     * @type {string}
     * @memberof V1ExtraAlipayLite
     */
    body: string;
    /**
     * 业务扩展参数
     * @type {V1ExtraAlipayBusinessParams}
     * @memberof V1ExtraAlipayLite
     */
    businessParams?: V1ExtraAlipayBusinessParams;
    /**
     * 买家的支付宝唯一用户号（2088开头的16位纯数字）
     * @type {string}
     * @memberof V1ExtraAlipayLite
     */
    buyerId: string;
    /**
     * 可打折金额. 参与优惠计算的金额，单位为元，精确到小数点后两位，取值范围[0.01,100000000] 如果该值未传入，但传入了【订单总金额】，【不可打折金额】则该值默认为【订单总金额】-【不可打折金额】
     * @type {number}
     * @memberof V1ExtraAlipayLite
     */
    discountableAmount?: number;
    /**
     * 业务扩展参数
     * @type {V1ExtraAlipayExtendParams}
     * @memberof V1ExtraAlipayLite
     */
    extendParams?: V1ExtraAlipayExtendParams;
    /**
     * 物流信息
     * @type {V1ExtraAlipayLogisticsDetail}
     * @memberof V1ExtraAlipayLite
     */
    logisticsDetail?: V1ExtraAlipayLogisticsDetail;
    /**
     * 商户操作员编号
     * @type {string}
     * @memberof V1ExtraAlipayLite
     */
    operatorId: string;
    /**
     * 销售产品码，商家和支付宝签约的产品码，为固定值 FACE_TO_FACE_PAYMENT
     * @type {string}
     * @memberof V1ExtraAlipayLite
     */
    productCode: string;
    /**
     * 收货信息
     * @type {V1ExtraAlipayReceiverAddressInfo}
     * @memberof V1ExtraAlipayLite
     */
    receiverAddressInfo?: V1ExtraAlipayReceiverAddressInfo;
    /**
     * 卖家支付宝用户号
     * @type {string}
     * @memberof V1ExtraAlipayLite
     */
    sellerId: string;
    /**
     * 结算信息
     * @type {V1ExtraAlipaySettleInfo}
     * @memberof V1ExtraAlipayLite
     */
    settleInfo?: V1ExtraAlipaySettleInfo;
    /**
     * 商户门店编号
     * @type {string}
     * @memberof V1ExtraAlipayLite
     */
    storeId: string;
    /**
     * 商户机具终端编号
     * @type {string}
     * @memberof V1ExtraAlipayLite
     */
    terminalId: string;
    /**
     * 绝对超时时间，格式为yyyy-MM-dd HH:mm:ss
     * @type {string}
     * @memberof V1ExtraAlipayLite
     */
    timeExpire: string;
    /**
     * 订单有效时间，该时间段内订单可以进行支付，结束后订单将关闭，天数为0表示永久有效
     * @type {string}
     * @memberof V1ExtraAlipayLite
     */
    timeoutExpress: string;
    /**
     * [ONLY IN RESPONSE] 支付宝交易号
     * @type {string}
     * @memberof V1ExtraAlipayLite
     */
    tradeNo: string;
    /**
     * 不可打折金额. 不参与优惠计算的金额，单位为元，精确到小数点后两位，取值范围[0.01,100000000] 如果该值未传入，但传入了【订单总金额】,【可打折金额】，则该值默认为【订单总金额】-【可打折金额】
     * @type {number}
     * @memberof V1ExtraAlipayLite
     */
    undiscountableAmount?: number;
}

/**
 * 
 * @export
 * @interface V1ExtraAlipayLogisticsDetail
 */
export interface V1ExtraAlipayLogisticsDetail {
    /**
     * 
     * @type {string}
     * @memberof V1ExtraAlipayLogisticsDetail
     */
    logisticsType?: string;
}

/**
 * 
 * @export
 * @interface V1ExtraAlipayPage
 */
export interface V1ExtraAlipayPage {
    /**
     * 签约参数。如果希望在sdk中支付并签约，需要在这里传入签约信息。周期扣款场景 product_code 为 CYCLE_PAY_AUTH 时必填。
     * @type {V1ExtraAlipayAgreementSignParams}
     * @memberof V1ExtraAlipayPage
     */
    agreementSignParams?: V1ExtraAlipayAgreementSignParams;
    /**
     * 业务扩展参数
     * @type {number}
     * @memberof V1ExtraAlipayPage
     */
    businessParams: number;
    /**
     * 禁用渠道
     * @type {string}
     * @memberof V1ExtraAlipayPage
     */
    disablePayChannels: string;
    /**
     * 可用渠道
     * @type {string}
     * @memberof V1ExtraAlipayPage
     */
    enablePayChannels: string;
    /**
     * 支付宝用户信息
     * @type {V1ExtraAlipayExtUserInfo}
     * @memberof V1ExtraAlipayPage
     */
    extUserInfo?: V1ExtraAlipayExtUserInfo;
    /**
     * 业务扩展参数
     * @type {V1ExtraAlipayExtendParams}
     * @memberof V1ExtraAlipayPage
     */
    extendParams?: V1ExtraAlipayExtendParams;
    /**
     * 商品明细列表
     * @type {Array<V1ExtraAlipayGoodsDetail>}
     * @memberof V1ExtraAlipayPage
     */
    goodsDetail?: Array<V1ExtraAlipayGoodsDetail>;
    /**
     * 商品类型
     * @type {string}
     * @memberof V1ExtraAlipayPage
     */
    goodsType: string;
    /**
     * 支付宝用户ID
     * @type {number}
     * @memberof V1ExtraAlipayPage
     */
    integrationType: number;
    /**
     * 发票信息
     * @type {V1ExtraAlipayInvoiceInfo}
     * @memberof V1ExtraAlipayPage
     */
    invoiceInfo?: V1ExtraAlipayInvoiceInfo;
    /**
     * [ONLY IN RESPONSE] 商户订单号
     * @type {string}
     * @memberof V1ExtraAlipayPage
     */
    merchantTradeId: string;
    /**
     * [ONLY IN RESPONSE] 支付链接
     * @type {string}
     * @memberof V1ExtraAlipayPage
     */
    payUrl: string;
    /**
     * 优惠参数
     * @type {string}
     * @memberof V1ExtraAlipayPage
     */
    promoParams: string;
    /**
     * 扫码支付模式
     * @type {string}
     * @memberof V1ExtraAlipayPage
     */
    qrPayMode: string;
    /**
     * 二维码宽度
     * @type {number}
     * @memberof V1ExtraAlipayPage
     */
    qrcodeWidth: number;
    /**
     * 请求来源地址
     * @type {number}
     * @memberof V1ExtraAlipayPage
     */
    requestFromUrl: number;
    /**
     * 分账类型卖家的分账类型，目前只支持传入ROYALTY（普通分账类型）。
     * @type {V1ExtraAlipayRoyaltyInfo}
     * @memberof V1ExtraAlipayPage
     */
    royaltyInfo?: V1ExtraAlipayRoyaltyInfo;
    /**
     * [ONLY IN RESPONSE] 收款支付宝用户ID
     * @type {string}
     * @memberof V1ExtraAlipayPage
     */
    sellerId: string;
    /**
     * 结算信息
     * @type {V1ExtraAlipaySettleInfo}
     * @memberof V1ExtraAlipayPage
     */
    settleInfo?: V1ExtraAlipaySettleInfo;
    /**
     * 商户门店编号
     * @type {string}
     * @memberof V1ExtraAlipayPage
     */
    storeId: string;
    /**
     * 二级商户信息
     * @type {V1ExtraAlipaySubMerchant}
     * @memberof V1ExtraAlipayPage
     */
    subMerchant?: V1ExtraAlipaySubMerchant;
    /**
     * 订单失效时间
     * @type {number}
     * @memberof V1ExtraAlipayPage
     */
    timeExpire?: number;
}

/**
 * 
 * @export
 * @interface V1ExtraAlipayPayParams
 */
export interface V1ExtraAlipayPayParams {
    /**
     * 
     * @type {string}
     * @memberof V1ExtraAlipayPayParams
     */
    asyncType?: string;
}

/**
 * 
 * @export
 * @interface V1ExtraAlipayQr
 */
export interface V1ExtraAlipayQr {
    /**
     * 买家的支付宝唯一用户号（2088开头的16位纯数字）
     * @type {string}
     * @memberof V1ExtraAlipayQr
     */
    buyerId: string;
    /**
     * 可打折金额. 参与优惠计算的金额，单位为元，精确到小数点后两位，取值范围[0.01,100000000] 如果该值未传入，但传入了【订单总金额】，【不可打折金额】则该值默认为【订单总金额】-【不可打折金额】
     * @type {string}
     * @memberof V1ExtraAlipayQr
     */
    discountableAmount?: string;
    /**
     * 商品明细列表
     * @type {Array<V1ExtraAlipayGoodsDetail>}
     * @memberof V1ExtraAlipayQr
     */
    goodsDetail?: Array<V1ExtraAlipayGoodsDetail>;
    /**
     * 商户操作员编号
     * @type {string}
     * @memberof V1ExtraAlipayQr
     */
    operatorId: string;
    /**
     * 销售产品码，商家和支付宝签约的产品码，为固定值QUICK_MSECURITY_PAY
     * @type {string}
     * @memberof V1ExtraAlipayQr
     */
    productCode: string;
    /**
     * [ONLY IN RESPONSE] 二维码
     * @type {string}
     * @memberof V1ExtraAlipayQr
     */
    qrCode: string;
    /**
     * 支付场景。 条码支付，取值：bar_code； 声波支付，取值：wave_code
     * @type {string}
     * @memberof V1ExtraAlipayQr
     */
    qrCodeTimeoutExpress: string;
    /**
     * [ONLY IN RESPONSE] 二维码图片的URL地址
     * @type {string}
     * @memberof V1ExtraAlipayQr
     */
    qrLink: string;
    /**
     * 该笔订单允许的最晚付款时间，逾期将关闭交易。取值范围：1m～15d。m-分钟，h-小时，d-天，1c-当天（1c-当天的情况下，无论交易何时创建，都在0点关闭）。 该参数数值不接受小数点， 如 1.5h，可转换为 90m。注：若为空，则默认为15d。
     * @type {string}
     * @memberof V1ExtraAlipayQr
     */
    queryOptions?: string;
    /**
     * 商户门店编号
     * @type {string}
     * @memberof V1ExtraAlipayQr
     */
    storeId: string;
    /**
     * 商户机具终端编号
     * @type {string}
     * @memberof V1ExtraAlipayQr
     */
    terminalId: string;
}

/**
 * 
 * @export
 * @interface V1ExtraAlipayReceiverAddressInfo
 */
export interface V1ExtraAlipayReceiverAddressInfo {
    /**
     * 
     * @type {string}
     * @memberof V1ExtraAlipayReceiverAddressInfo
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof V1ExtraAlipayReceiverAddressInfo
     */
    divisionCode?: string;
    /**
     * 
     * @type {string}
     * @memberof V1ExtraAlipayReceiverAddressInfo
     */
    mobile?: string;
    /**
     * 
     * @type {string}
     * @memberof V1ExtraAlipayReceiverAddressInfo
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof V1ExtraAlipayReceiverAddressInfo
     */
    zip?: string;
}

/**
 * 
 * @export
 * @interface V1ExtraAlipayRoyaltyInfo
 */
export interface V1ExtraAlipayRoyaltyInfo {
    /**
     * 分账明细的信息，可以描述多条分账指令，json数组。
     * @type {ExtraAlipayRoyaltyInfoRoyaltyDetailInfos}
     * @memberof V1ExtraAlipayRoyaltyInfo
     */
    royaltyDetailInfos?: ExtraAlipayRoyaltyInfoRoyaltyDetailInfos;
    /**
     * 周期类型period_type是周期扣款产品必填，枚举值为DAY和MONTH
     * @type {string}
     * @memberof V1ExtraAlipayRoyaltyInfo
     */
    royaltyType: string;
}

/**
 * 
 * @export
 * @interface V1ExtraAlipayScan
 */
export interface V1ExtraAlipayScan {
    /**
     * 预授权类型
     * @type {string}
     * @memberof V1ExtraAlipayScan
     */
    advancePaymentType: string;
    /**
     * 协议参数
     * @type {V1ExtraAlipayAgreementParams}
     * @memberof V1ExtraAlipayScan
     */
    agreementParams?: V1ExtraAlipayAgreementParams;
    /**
     * 用户的条码
     * @type {string}
     * @memberof V1ExtraAlipayScan
     */
    authCode: string;
    /**
     * 授权确认方式
     * @type {string}
     * @memberof V1ExtraAlipayScan
     */
    authConfirmMode: string;
    /**
     * 授权号
     * @type {string}
     * @memberof V1ExtraAlipayScan
     */
    authNo: string;
    /**
     * 买家的支付宝用户id
     * @type {string}
     * @memberof V1ExtraAlipayScan
     */
    buyerId: string;
    /**
     * [ONLY IN RESPONSE] 买家支付宝账号
     * @type {string}
     * @memberof V1ExtraAlipayScan
     */
    buyerLogonId: string;
    /**
     * [ONLY IN RESPONSE] 付款金额
     * @type {number}
     * @memberof V1ExtraAlipayScan
     */
    buyerPayAmount: number;
    /**
     * [ONLY IN RESPONSE] 买家在支付宝的用户id
     * @type {string}
     * @memberof V1ExtraAlipayScan
     */
    buyerUserId: string;
    /**
     * [ONLY IN RESPONSE] 商家优惠金额
     * @type {number}
     * @memberof V1ExtraAlipayScan
     */
    discountAmount: number;
    /**
     * [ONLY IN RESPONSE] 商家优惠商品明细
     * @type {string}
     * @memberof V1ExtraAlipayScan
     */
    discountGoodsDetail: string;
    /**
     * 可打折金额
     * @type {number}
     * @memberof V1ExtraAlipayScan
     */
    discountableAmount: number;
    /**
     * 业务扩展参数
     * @type {V1ExtraAlipayExtendParams}
     * @memberof V1ExtraAlipayScan
     */
    extendParams?: V1ExtraAlipayExtendParams;
    /**
     * [ONLY IN RESPONSE] 支付金额信息
     * @type {V1ExtraAlipayFundBillList}
     * @memberof V1ExtraAlipayScan
     */
    fundBillList?: V1ExtraAlipayFundBillList;
    /**
     * [ONLY IN RESPONSE] 支付时间
     * @type {string}
     * @memberof V1ExtraAlipayScan
     */
    gmtPayment: string;
    /**
     * 商品明细列表
     * @type {Array<V1ExtraAlipayGoodsDetail>}
     * @memberof V1ExtraAlipayScan
     */
    goodsDetail?: Array<V1ExtraAlipayGoodsDetail>;
    /**
     * [ONLY IN RESPONSE] 开票金额
     * @type {number}
     * @memberof V1ExtraAlipayScan
     */
    invoiceAmount: number;
    /**
     * 是否异步支付
     * @type {V1ExtraAlipayPayParams}
     * @memberof V1ExtraAlipayScan
     */
    isAsyncPay?: V1ExtraAlipayPayParams;
    /**
     * [ONLY IN RESPONSE] 平台优惠金额
     * @type {number}
     * @memberof V1ExtraAlipayScan
     */
    mdiscountAmount: number;
    /**
     * 商户操作员编号
     * @type {string}
     * @memberof V1ExtraAlipayScan
     */
    operatorId: string;
    /**
     * [ONLY IN RESPONSE] 支付宝返回的支付参数
     * @type {string}
     * @memberof V1ExtraAlipayScan
     */
    payParams: string;
    /**
     * [ONLY IN RESPONSE] 集分宝金额
     * @type {number}
     * @memberof V1ExtraAlipayScan
     */
    pointAmount: number;
    /**
     * 销售产品码
     * @type {string}
     * @memberof V1ExtraAlipayScan
     */
    productCode: string;
    /**
     * 商户授权查询类型
     * @type {string}
     * @memberof V1ExtraAlipayScan
     */
    queryOptions: string;
    /**
     * [ONLY IN RESPONSE] 实收金额
     * @type {number}
     * @memberof V1ExtraAlipayScan
     */
    receiptAmount: number;
    /**
     * 请求方机构id
     * @type {string}
     * @memberof V1ExtraAlipayScan
     */
    requestOrgPid: string;
    /**
     * 支付场景
     * @type {string}
     * @memberof V1ExtraAlipayScan
     */
    scene: string;
    /**
     * 结算信息
     * @type {V1ExtraAlipaySettleInfo}
     * @memberof V1ExtraAlipayScan
     */
    settleInfo?: V1ExtraAlipaySettleInfo;
    /**
     * 商户门店编号
     * @type {string}
     * @memberof V1ExtraAlipayScan
     */
    storeId: string;
    /**
     * [ONLY IN RESPONSE] 商户门店名称
     * @type {string}
     * @memberof V1ExtraAlipayScan
     */
    storeName: string;
    /**
     * 子商户信息
     * @type {V1ExtraAlipaySubMerchant}
     * @memberof V1ExtraAlipayScan
     */
    subMerchant?: V1ExtraAlipaySubMerchant;
    /**
     * 商户机具终端编号
     * @type {string}
     * @memberof V1ExtraAlipayScan
     */
    terminalId: string;
    /**
     * [ONLY IN RESPONSE] 订单金额
     * @type {number}
     * @memberof V1ExtraAlipayScan
     */
    totalAmount: number;
    /**
     * 不可打折金额
     * @type {number}
     * @memberof V1ExtraAlipayScan
     */
    undiscountableAmount: number;
    /**
     * [ONLY IN RESPONSE] 商家优惠明细列表
     * @type {V1ExtraAlipayVoucherDetailList}
     * @memberof V1ExtraAlipayScan
     */
    voucherDetailList?: V1ExtraAlipayVoucherDetailList;
}

/**
 * 
 * @export
 * @interface V1ExtraAlipaySettleInfo
 */
export interface V1ExtraAlipaySettleInfo {
    /**
     * 
     * @type {ExtraAlipaySettleInfoSettleDetailInfos}
     * @memberof V1ExtraAlipaySettleInfo
     */
    settleDetailInfos?: ExtraAlipaySettleInfoSettleDetailInfos;
    /**
     * 
     * @type {string}
     * @memberof V1ExtraAlipaySettleInfo
     */
    settlePeriodTime?: string;
}

/**
 * 
 * @export
 * @interface V1ExtraAlipaySubMerchant
 */
export interface V1ExtraAlipaySubMerchant {
    /**
     * 商户的支付宝user_id
     * @type {string}
     * @memberof V1ExtraAlipaySubMerchant
     */
    merchantId: string;
    /**
     * 商户类型，1：支付宝服务窗，2：第三方App，目前只支持支付宝服务窗，默认为1
     * @type {string}
     * @memberof V1ExtraAlipaySubMerchant
     */
    merchantType: string;
}

/**
 * 
 * @export
 * @interface V1ExtraAlipayVoucherDetailList
 */
export interface V1ExtraAlipayVoucherDetailList {
    /**
     * 
     * @type {number}
     * @memberof V1ExtraAlipayVoucherDetailList
     */
    amount?: number;
    /**
     * 
     * @type {string}
     * @memberof V1ExtraAlipayVoucherDetailList
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof V1ExtraAlipayVoucherDetailList
     */
    memo?: string;
    /**
     * 
     * @type {number}
     * @memberof V1ExtraAlipayVoucherDetailList
     */
    merchantContribute?: number;
    /**
     * 
     * @type {string}
     * @memberof V1ExtraAlipayVoucherDetailList
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof V1ExtraAlipayVoucherDetailList
     */
    otherContribute?: number;
    /**
     * 
     * @type {number}
     * @memberof V1ExtraAlipayVoucherDetailList
     */
    purchaseAntContribute?: number;
    /**
     * 
     * @type {number}
     * @memberof V1ExtraAlipayVoucherDetailList
     */
    purchaseBuyerContribute?: number;
    /**
     * 
     * @type {number}
     * @memberof V1ExtraAlipayVoucherDetailList
     */
    purchaseMerchantContribute?: number;
    /**
     * 
     * @type {string}
     * @memberof V1ExtraAlipayVoucherDetailList
     */
    templateId?: string;
    /**
     * 
     * @type {string}
     * @memberof V1ExtraAlipayVoucherDetailList
     */
    type?: string;
}

/**
 * 
 * @export
 * @interface V1ExtraAlipayWap
 */
export interface V1ExtraAlipayWap {
    /**
     * 授权码
     * @type {string}
     * @memberof V1ExtraAlipayWap
     */
    authToken: string;
    /**
     * 业务扩展参数
     * @type {string}
     * @memberof V1ExtraAlipayWap
     */
    businessParams: string;
    /**
     * 禁用渠道
     * @type {string}
     * @memberof V1ExtraAlipayWap
     */
    disablePayChannels: string;
    /**
     * 可用渠道
     * @type {string}
     * @memberof V1ExtraAlipayWap
     */
    enablePayChannels: string;
    /**
     * 支付宝用户信息
     * @type {V1ExtraAlipayExtUserInfo}
     * @memberof V1ExtraAlipayWap
     */
    extUserInfo?: V1ExtraAlipayExtUserInfo;
    /**
     * 业务扩展参数
     * @type {V1ExtraAlipayExtendParams}
     * @memberof V1ExtraAlipayWap
     */
    extendParams?: V1ExtraAlipayExtendParams;
    /**
     * 支付金额信息
     * @type {Array<string>}
     * @memberof V1ExtraAlipayWap
     */
    fundBillList?: Array<string>;
    /**
     * 商品明细列表
     * @type {Array<V1ExtraAlipayGoodsDetail>}
     * @memberof V1ExtraAlipayWap
     */
    goodsDetail?: Array<V1ExtraAlipayGoodsDetail>;
    /**
     * 商品类型
     * @type {string}
     * @memberof V1ExtraAlipayWap
     */
    goodsType: string;
    /**
     * [ONLY IN RESPONSE] 商户订单号
     * @type {string}
     * @memberof V1ExtraAlipayWap
     */
    merchantTradeId: string;
    /**
     * [ONLY IN RESPONSE] 支付链接
     * @type {string}
     * @memberof V1ExtraAlipayWap
     */
    payUrl: string;
    /**
     * 销售产品码
     * @type {string}
     * @memberof V1ExtraAlipayWap
     */
    productCode: string;
    /**
     * 优惠参数
     * @type {string}
     * @memberof V1ExtraAlipayWap
     */
    promoParams: string;
    /**
     * 支付取消跳转的地址
     * @type {string}
     * @memberof V1ExtraAlipayWap
     */
    quitUrl: string;
    /**
     * 支付成功跳转的地址
     * @type {string}
     * @memberof V1ExtraAlipayWap
     */
    returnUrl: string;
    /**
     * [ONLY IN RESPONSE] 收款支付宝用户ID
     * @type {string}
     * @memberof V1ExtraAlipayWap
     */
    sellerId: string;
    /**
     * 商户门店编号
     * @type {string}
     * @memberof V1ExtraAlipayWap
     */
    storeId: string;
    /**
     * 
     * @type {V1ExtraAlipayVoucherDetailList}
     * @memberof V1ExtraAlipayWap
     */
    voucherDetailList?: V1ExtraAlipayVoucherDetailList;
}

/**
 * 
 * @export
 * @interface V1ExtraWechatpayApp
 */
export interface V1ExtraWechatpayApp {
    /**
     * app拉起支付配置信息
     * @type {V1ExtraWechatpayAppConfig}
     * @memberof V1ExtraWechatpayApp
     */
    appConfig?: V1ExtraWechatpayAppConfig;
    /**
     * 元数据
     * @type {string}
     * @memberof V1ExtraWechatpayApp
     */
    attach?: string;
    /**
     * 商品详情
     * @type {V1ExtraWechatpayDetail}
     * @memberof V1ExtraWechatpayApp
     */
    detail?: V1ExtraWechatpayDetail;
    /**
     * 订单优惠标记
     * @type {string}
     * @memberof V1ExtraWechatpayApp
     */
    goodsTag: string;
    /**
     * 预支付交易会话标识
     * @type {string}
     * @memberof V1ExtraWechatpayApp
     */
    prepayId: string;
    /**
     * 场景信息
     * @type {V1ExtraWechatpaySceneInfo}
     * @memberof V1ExtraWechatpayApp
     */
    sceneInfo?: V1ExtraWechatpaySceneInfo;
    /**
     * 结算信息
     * @type {V1ExtraWechatpaySettleInfo}
     * @memberof V1ExtraWechatpayApp
     */
    settleInfo?: V1ExtraWechatpaySettleInfo;
    /**
     * 交易结束时间
     * @type {string}
     * @memberof V1ExtraWechatpayApp
     */
    timeExpire: string;
    /**
     * 交易起始时间
     * @type {string}
     * @memberof V1ExtraWechatpayApp
     */
    timeStart: string;
}

/**
 * 
 * @export
 * @interface V1ExtraWechatpayAppConfig
 */
export interface V1ExtraWechatpayAppConfig {
    /**
     * 应用appid
     * @type {string}
     * @memberof V1ExtraWechatpayAppConfig
     */
    appid: string;
    /**
     * 随机字符串
     * @type {string}
     * @memberof V1ExtraWechatpayAppConfig
     */
    noncestr: string;
    /**
     * 扩展字段
     * @type {string}
     * @memberof V1ExtraWechatpayAppConfig
     */
    _package: string;
    /**
     * 商户号
     * @type {string}
     * @memberof V1ExtraWechatpayAppConfig
     */
    partnerid: string;
    /**
     * 预支付交易会话标识
     * @type {string}
     * @memberof V1ExtraWechatpayAppConfig
     */
    prepayid: string;
    /**
     * 签名
     * @type {string}
     * @memberof V1ExtraWechatpayAppConfig
     */
    sign: string;
    /**
     * 时间戳
     * @type {string}
     * @memberof V1ExtraWechatpayAppConfig
     */
    timestamp: string;
}

/**
 * 
 * @export
 * @interface V1ExtraWechatpayAppletConfig
 */
export interface V1ExtraWechatpayAppletConfig {
    /**
     * 小程序appid
     * @type {string}
     * @memberof V1ExtraWechatpayAppletConfig
     */
    appId: string;
    /**
     * 随机字符串
     * @type {string}
     * @memberof V1ExtraWechatpayAppletConfig
     */
    nonceStr: string;
    /**
     * 扩展字段
     * @type {string}
     * @memberof V1ExtraWechatpayAppletConfig
     */
    _package: string;
    /**
     * 签名
     * @type {string}
     * @memberof V1ExtraWechatpayAppletConfig
     */
    paySign: string;
    /**
     * 签名类型
     * @type {string}
     * @memberof V1ExtraWechatpayAppletConfig
     */
    signType: string;
    /**
     * 时间戳
     * @type {string}
     * @memberof V1ExtraWechatpayAppletConfig
     */
    timeStamp: string;
}

/**
 * 
 * @export
 * @interface V1ExtraWechatpayDetail
 */
export interface V1ExtraWechatpayDetail {
    /**
     * 
     * @type {string}
     * @memberof V1ExtraWechatpayDetail
     */
    costPrice?: string;
    /**
     * 
     * @type {Array<ExtraWechatpayDetailGoodsDetail>}
     * @memberof V1ExtraWechatpayDetail
     */
    goodsDetail?: Array<ExtraWechatpayDetailGoodsDetail>;
    /**
     * 
     * @type {string}
     * @memberof V1ExtraWechatpayDetail
     */
    invoiceId?: string;
}

/**
 * 
 * @export
 * @interface V1ExtraWechatpayH5
 */
export interface V1ExtraWechatpayH5 {
    /**
     * 元数据
     * @type {string}
     * @memberof V1ExtraWechatpayH5
     */
    attach?: string;
    /**
     * 商品详情
     * @type {V1ExtraWechatpayDetail}
     * @memberof V1ExtraWechatpayH5
     */
    detail?: V1ExtraWechatpayDetail;
    /**
     * 订单优惠标记
     * @type {string}
     * @memberof V1ExtraWechatpayH5
     */
    goodsTag: string;
    /**
     * 支付签名
     * @type {string}
     * @memberof V1ExtraWechatpayH5
     */
    paySign: string;
    /**
     * 支付链接
     * @type {string}
     * @memberof V1ExtraWechatpayH5
     */
    payUrl: string;
    /**
     * 预支付交易会话标识
     * @type {string}
     * @memberof V1ExtraWechatpayH5
     */
    prepayId: string;
    /**
     * 场景信息
     * @type {V1ExtraWechatpaySceneInfo}
     * @memberof V1ExtraWechatpayH5
     */
    sceneInfo?: V1ExtraWechatpaySceneInfo;
    /**
     * 结算信息
     * @type {V1ExtraWechatpaySettleInfo}
     * @memberof V1ExtraWechatpayH5
     */
    settleInfo?: V1ExtraWechatpaySettleInfo;
    /**
     * 交易结束时间
     * @type {string}
     * @memberof V1ExtraWechatpayH5
     */
    timeExpire: string;
    /**
     * 交易起始时间
     * @type {string}
     * @memberof V1ExtraWechatpayH5
     */
    timeStart: string;
    /**
     * WAP网站名
     * @type {string}
     * @memberof V1ExtraWechatpayH5
     */
    wapName: string;
    /**
     * WAP网站URL
     * @type {string}
     * @memberof V1ExtraWechatpayH5
     */
    wapUrl: string;
}

/**
 * 
 * @export
 * @interface V1ExtraWechatpayJsapi
 */
export interface V1ExtraWechatpayJsapi {
    /**
     * 元数据
     * @type {string}
     * @memberof V1ExtraWechatpayJsapi
     */
    attach?: string;
    /**
     * 商品详情
     * @type {V1ExtraWechatpayDetail}
     * @memberof V1ExtraWechatpayJsapi
     */
    detail?: V1ExtraWechatpayDetail;
    /**
     * 订单优惠标记
     * @type {string}
     * @memberof V1ExtraWechatpayJsapi
     */
    goodsTag: string;
    /**
     * jsapi支付配置信息
     * @type {V1ExtraWechatpayJsapiConfig}
     * @memberof V1ExtraWechatpayJsapi
     */
    jsapiConfig?: V1ExtraWechatpayJsapiConfig;
    /**
     * 支付者信息
     * @type {V1ExtraWechatpayPayer}
     * @memberof V1ExtraWechatpayJsapi
     */
    payer?: V1ExtraWechatpayPayer;
    /**
     * 预支付交易会话标识
     * @type {string}
     * @memberof V1ExtraWechatpayJsapi
     */
    prepayId: string;
    /**
     * 场景信息
     * @type {V1ExtraWechatpaySceneInfo}
     * @memberof V1ExtraWechatpayJsapi
     */
    sceneInfo?: V1ExtraWechatpaySceneInfo;
    /**
     * 结算信息
     * @type {V1ExtraWechatpaySettleInfo}
     * @memberof V1ExtraWechatpayJsapi
     */
    settleInfo?: V1ExtraWechatpaySettleInfo;
    /**
     * 交易结束时间
     * @type {string}
     * @memberof V1ExtraWechatpayJsapi
     */
    timeExpire: string;
    /**
     * 交易起始时间
     * @type {string}
     * @memberof V1ExtraWechatpayJsapi
     */
    timeStart: string;
}

/**
 * 
 * @export
 * @interface V1ExtraWechatpayJsapiConfig
 */
export interface V1ExtraWechatpayJsapiConfig {
    /**
     * 公众号appid
     * @type {string}
     * @memberof V1ExtraWechatpayJsapiConfig
     */
    appId: string;
    /**
     * 随机字符串
     * @type {string}
     * @memberof V1ExtraWechatpayJsapiConfig
     */
    nonceStr: string;
    /**
     * 扩展字段
     * @type {string}
     * @memberof V1ExtraWechatpayJsapiConfig
     */
    _package: string;
    /**
     * 签名
     * @type {string}
     * @memberof V1ExtraWechatpayJsapiConfig
     */
    paySign: string;
    /**
     * 签名类型
     * @type {string}
     * @memberof V1ExtraWechatpayJsapiConfig
     */
    signType: string;
    /**
     * 时间戳
     * @type {string}
     * @memberof V1ExtraWechatpayJsapiConfig
     */
    timeStamp: string;
}

/**
 * 
 * @export
 * @interface V1ExtraWechatpayLite
 */
export interface V1ExtraWechatpayLite {
    /**
     * 小程序拉起支付配置信息
     * @type {V1ExtraWechatpayAppletConfig}
     * @memberof V1ExtraWechatpayLite
     */
    appletConfig?: V1ExtraWechatpayAppletConfig;
    /**
     * 元数据
     * @type {string}
     * @memberof V1ExtraWechatpayLite
     */
    attach?: string;
    /**
     * 商品详情
     * @type {V1ExtraWechatpayDetail}
     * @memberof V1ExtraWechatpayLite
     */
    detail?: V1ExtraWechatpayDetail;
    /**
     * 订单优惠标记
     * @type {string}
     * @memberof V1ExtraWechatpayLite
     */
    goodsTag: string;
    /**
     * 付款人信息
     * @type {V1ExtraWechatpayPayer}
     * @memberof V1ExtraWechatpayLite
     */
    payer?: V1ExtraWechatpayPayer;
    /**
     * 预支付交易会话标识
     * @type {string}
     * @memberof V1ExtraWechatpayLite
     */
    prepayId: string;
    /**
     * 场景信息
     * @type {V1ExtraWechatpaySceneInfo}
     * @memberof V1ExtraWechatpayLite
     */
    sceneInfo?: V1ExtraWechatpaySceneInfo;
    /**
     * 结算信息
     * @type {V1ExtraWechatpaySettleInfo}
     * @memberof V1ExtraWechatpayLite
     */
    settleInfo?: V1ExtraWechatpaySettleInfo;
    /**
     * 交易结束时间
     * @type {string}
     * @memberof V1ExtraWechatpayLite
     */
    timeExpire: string;
    /**
     * 交易起始时间
     * @type {string}
     * @memberof V1ExtraWechatpayLite
     */
    timeStart: string;
}

/**
 * 
 * @export
 * @interface V1ExtraWechatpayNative
 */
export interface V1ExtraWechatpayNative {
    /**
     * 元数据
     * @type {string}
     * @memberof V1ExtraWechatpayNative
     */
    attach?: string;
    /**
     * 商品详情
     * @type {V1ExtraWechatpayDetail}
     * @memberof V1ExtraWechatpayNative
     */
    detail?: V1ExtraWechatpayDetail;
    /**
     * 订单优惠标记
     * @type {string}
     * @memberof V1ExtraWechatpayNative
     */
    goodsTag: string;
    /**
     * 二维码数据
     * @type {string}
     * @memberof V1ExtraWechatpayNative
     */
    qrCode: string;
    /**
     * 二维码链接
     * @type {string}
     * @memberof V1ExtraWechatpayNative
     */
    qrLink: string;
    /**
     * 场景信息
     * @type {V1ExtraWechatpaySceneInfo}
     * @memberof V1ExtraWechatpayNative
     */
    sceneInfo?: V1ExtraWechatpaySceneInfo;
    /**
     * 结算信息
     * @type {V1ExtraWechatpaySettleInfo}
     * @memberof V1ExtraWechatpayNative
     */
    settleInfo?: V1ExtraWechatpaySettleInfo;
    /**
     * 交易过期时间
     * @type {string}
     * @memberof V1ExtraWechatpayNative
     */
    timeExpire: string;
    /**
     * 交易起始时间
     * @type {string}
     * @memberof V1ExtraWechatpayNative
     */
    timeStart: string;
}

/**
 * 
 * @export
 * @interface V1ExtraWechatpayPayer
 */
export interface V1ExtraWechatpayPayer {
    /**
     * 
     * @type {string}
     * @memberof V1ExtraWechatpayPayer
     */
    appid?: string;
    /**
     * 
     * @type {string}
     * @memberof V1ExtraWechatpayPayer
     */
    openid?: string;
}

/**
 * 
 * @export
 * @interface V1ExtraWechatpayScan
 */
export interface V1ExtraWechatpayScan {
    /**
     * 元数据
     * @type {string}
     * @memberof V1ExtraWechatpayScan
     */
    attach?: string;
    /**
     * 授权码
     * @type {string}
     * @memberof V1ExtraWechatpayScan
     */
    authCode: string;
    /**
     * 付款银行
     * @type {string}
     * @memberof V1ExtraWechatpayScan
     */
    bankType: string;
    /**
     * 现金支付金额
     * @type {string}
     * @memberof V1ExtraWechatpayScan
     */
    cashFee: string;
    /**
     * 现金支付币种
     * @type {string}
     * @memberof V1ExtraWechatpayScan
     */
    cashFeeType: string;
    /**
     * 商品详情
     * @type {V1ExtraWechatpayDetail}
     * @memberof V1ExtraWechatpayScan
     */
    detail?: V1ExtraWechatpayDetail;
    /**
     * 货币种类
     * @type {string}
     * @memberof V1ExtraWechatpayScan
     */
    feeType: string;
    /**
     * 订单优惠标记
     * @type {string}
     * @memberof V1ExtraWechatpayScan
     */
    goodsTag: string;
    /**
     * 是否关注公众账号
     * @type {boolean}
     * @memberof V1ExtraWechatpayScan
     */
    isSubscribe: boolean;
    /**
     * 付款人信息
     * @type {V1ExtraWechatpayPayer}
     * @memberof V1ExtraWechatpayScan
     */
    payer?: V1ExtraWechatpayPayer;
    /**
     * 场景信息
     * @type {V1ExtraWechatpaySceneInfo}
     * @memberof V1ExtraWechatpayScan
     */
    sceneInfo?: V1ExtraWechatpaySceneInfo;
    /**
     * 结算信息
     * @type {V1ExtraWechatpaySettleInfo}
     * @memberof V1ExtraWechatpayScan
     */
    settleInfo?: V1ExtraWechatpaySettleInfo;
    /**
     * 应结订单金额
     * @type {number}
     * @memberof V1ExtraWechatpayScan
     */
    settlementTotalFee: number;
    /**
     * 终端IP
     * @type {string}
     * @memberof V1ExtraWechatpayScan
     */
    spbillCreateIp: string;
    /**
     * 子商户是否关注公众账号
     * @type {boolean}
     * @memberof V1ExtraWechatpayScan
     */
    subIsSubscribe: boolean;
    /**
     * 子商户openid
     * @type {string}
     * @memberof V1ExtraWechatpayScan
     */
    subOpenid: string;
    /**
     * 支付完成时间
     * @type {string}
     * @memberof V1ExtraWechatpayScan
     */
    timeEnd: string;
    /**
     * 交易结束时间
     * @type {string}
     * @memberof V1ExtraWechatpayScan
     */
    timeExpire: string;
    /**
     * 交易起始时间
     * @type {string}
     * @memberof V1ExtraWechatpayScan
     */
    timeStart: string;
}

/**
 * 
 * @export
 * @interface V1ExtraWechatpaySceneInfo
 */
export interface V1ExtraWechatpaySceneInfo {
    /**
     * 
     * @type {string}
     * @memberof V1ExtraWechatpaySceneInfo
     */
    deviceId?: string;
    /**
     * 
     * @type {ExtraWechatpaySceneInfoH5Info}
     * @memberof V1ExtraWechatpaySceneInfo
     */
    h5Info?: ExtraWechatpaySceneInfoH5Info;
    /**
     * 
     * @type {string}
     * @memberof V1ExtraWechatpaySceneInfo
     */
    payerClientIp?: string;
    /**
     * 
     * @type {ExtraWechatpaySceneInfoStoreInfo}
     * @memberof V1ExtraWechatpaySceneInfo
     */
    storeInfo?: ExtraWechatpaySceneInfoStoreInfo;
}

/**
 * 
 * @export
 * @interface V1ExtraWechatpaySettleInfo
 */
export interface V1ExtraWechatpaySettleInfo {
    /**
     * 
     * @type {boolean}
     * @memberof V1ExtraWechatpaySettleInfo
     */
    profitSharing?: boolean;
}

/**
 * Refund 对象允许你可以对已经支付的 charge 对象发起退款请求。
 * @export
 * @interface V1Refund
 */
export interface V1Refund {
    /**
     * 支付渠道退款元参数
     * @type {V1RefundExtra}
     * @memberof V1Refund
     */
    account?: V1RefundExtra;
    /**
     * 退款金额
     * @type {number}
     * @memberof V1Refund
     */
    amount: number;
    /**
     * Charge 对象 id
     * @type {string}
     * @memberof V1Refund
     */
    chargeId: string;
    /**
     * 商户系统订单号
     * @type {string}
     * @memberof V1Refund
     */
    chargeMerchantTradeId: string;
    /**
     * 退款创建时间
     * @type {Date}
     * @memberof V1Refund
     */
    createdAt?: Date;
    /**
     * 退款说明
     * @type {string}
     * @memberof V1Refund
     */
    description: string;
    /**
     * 支付渠道失败错误码
     * @type {string}
     * @memberof V1Refund
     */
    failureCode: string;
    /**
     * 支付渠道失败原因描述
     * @type {string}
     * @memberof V1Refund
     */
    failureMsg: string;
    /**
     * 退款是否成功
     * @type {boolean}
     * @memberof V1Refund
     */
    isSuccess: boolean;
    /**
     * 元数据，原样返回
     * @type {{ [key: string]: string; }}
     * @memberof V1Refund
     */
    metadata?: { [key: string]: string; };
    /**
     * Refund 对象 ID
     * @type {string}
     * @memberof V1Refund
     */
    refundId: string;
    /**
     * 退款单号
     * @type {string}
     * @memberof V1Refund
     */
    refundNo: string;
    /**
     * 退款状态
     * @type {string}
     * @memberof V1Refund
     */
    status: string;
    /**
     * 退款成功时间
     * @type {Date}
     * @memberof V1Refund
     */
    successAt?: Date;
    /**
     * 交易号
     * @type {string}
     * @memberof V1Refund
     */
    transactionNo: string;
}

/**
 * 
 * @export
 * @interface V1RefundExtra
 */
export interface V1RefundExtra {
    /**
     * 支付宝退款元参数，可参考 https://opendocs.alipay.com/apis/0287wa
     * @type {V1RefundExtraAlipay}
     * @memberof V1RefundExtra
     */
    alipay?: V1RefundExtraAlipay;
    /**
     * 微信支付退款元参数，可参考 https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_1_9.shtml
     * @type {V1RefundExtraWechatPay}
     * @memberof V1RefundExtra
     */
    wechatpay?: V1RefundExtraWechatPay;
}

/**
 * 
 * @export
 * @interface V1RefundExtraAlipay
 */
export interface V1RefundExtraAlipay {
    /**
     * 
     * @type {Array<RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo>}
     * @memberof V1RefundExtraAlipay
     */
    refundRoyaltyParameters?: Array<RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo>;
}

/**
 * 
 * @export
 * @interface V1RefundExtraWechatPay
 */
export interface V1RefundExtraWechatPay {
    /**
     * 出资账户信息
     * @type {RefundExtraWechatPayAccount}
     * @memberof V1RefundExtraWechatPay
     */
    account?: RefundExtraWechatPayAccount;
    /**
     * 退款商品
     * @type {Array<RefundExtraWechatPayGoodsDetailItem>}
     * @memberof V1RefundExtraWechatPay
     */
    goodsDetail?: Array<RefundExtraWechatPayGoodsDetailItem>;
}

/**
 * 
 * @export
 * @interface V1RefundListResponse
 */
export interface V1RefundListResponse {
    /**
     * Refund 对象
     * @type {Array<V1Refund>}
     * @memberof V1RefundListResponse
     */
    data?: Array<V1Refund>;
    /**
     * 表明获取列表之后是否还有更多的元素实体。如果值为 false，表明当前页是最后一页
     * @type {boolean}
     * @memberof V1RefundListResponse
     */
    hasMore: boolean;
    /**
     * 对象类型
     * @type {string}
     * @memberof V1RefundListResponse
     */
    object: string;
    /**
     * 总数据条数
     * @type {number}
     * @memberof V1RefundListResponse
     */
    total: number;
}

/**
 * 
 * @export
 * @interface V1RefundResponse
 */
export interface V1RefundResponse {
    /**
     * Refund 对象
     * @type {V1Refund}
     * @memberof V1RefundResponse
     */
    data?: V1Refund;
    /**
     * 对象类型
     * @type {string}
     * @memberof V1RefundResponse
     */
    object: string;
}

/**
 * 
 * @export
 * @interface V1WechatpayCallbackResponse
 */
export interface V1WechatpayCallbackResponse {
    /**
     * 
     * @type {string}
     * @memberof V1WechatpayCallbackResponse
     */
    callbackUrl?: string;
}

/**
 * 
 * @export
 * @interface V1WechatpayNotifyResponse
 */
export interface V1WechatpayNotifyResponse {
    /**
     * 
     * @type {boolean}
     * @memberof V1WechatpayNotifyResponse
     */
    success?: boolean;
}


/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 发起一次支付请求时需要创建一个新的 charge 对象，获取一个可用的支付凭据用于客户端向第三方渠道发起支付请求。如果使用测试模式的 API Key，则不会发生真实交易。当支付成功后，会发送 Webhooks 通知。
         * @summary 创建 Charge 对象
         * @param {V1CreateChargeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tradeServiceCharges(body: V1CreateChargeRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling tradeServiceCharges.');
            }
            const localVarPath = `/transaction/v1/charges`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-JUSTAP-API-KEY")
					: configuration.apiKey;
                localVarHeaderParameter["X-JUSTAP-API-KEY"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"V1CreateChargeRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 你可以在后台异步通知之前，通过查询接口确认支付状态。通过charge对象的id查询一个已创建的charge对象。
         * @summary 查询 Charge 对象
         * @param {string} chargeId [REQUIRED] Charge 对象 id
         * @param {string} [appId] [REQUIRED] 应用 id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tradeServiceQueryCharge(chargeId: string, appId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'chargeId' is not null or undefined
            if (chargeId === null || chargeId === undefined) {
                throw new RequiredError('chargeId','Required parameter chargeId was null or undefined when calling tradeServiceQueryCharge.');
            }
            const localVarPath = `/transaction/v1/charges/{charge_id}`
                .replace(`{${"charge_id"}}`, encodeURIComponent(String(chargeId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-JUSTAP-API-KEY")
					: configuration.apiKey;
                localVarHeaderParameter["X-JUSTAP-API-KEY"] = localVarApiKeyValue;
            }

            if (appId !== undefined) {
                localVarQueryParameter['app_id'] = appId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 返回之前创建过 charge 对象的一个列表。列表是按创建时间进行排序，总是将最新的 charge 对象显示在最前。如果不设置 created 参数，默认查询近一个月的数据；设置了 created 参数，会按照对应的时间段查询。
         * @summary 查询 Charge 对象列表
         * @param {string} [appId] [REQUIRED] 应用 id
         * @param {number} [limit] [OPTIONAL] 限制有多少对象可以被返回，限制范围是从 1~100 项，默认是 10 项
         * @param {string} [startingAfter] [OPTIONAL] 在分页时使用的指针，决定了列表的第一项从何处开始。假设你的一次请求返回列表的最后一项的 id 是 obj_end，你可以使用 starting_after &#x3D; obj_end 去获取下一页
         * @param {string} [endingBefore] [OPTIONAL] 在分页时使用的指针，决定了列表的最末项在何处结束。假设你的一次请求返回列表的第一项的 id 是 obj_start，你可以使用 ending_before &#x3D; obj_start 去获取上一页
         * @param {string} [merchantTradeId] [OPTIONAL] 客户系统订单号
         * @param {number} [createdLt] 大于 charge 对象的创建时间，用 Unix 时间戳表示
         * @param {number} [createdLte] 大于或等于 charge 对象的创建时间，用 Unix 时间戳表示
         * @param {number} [createdGt] 小于 charge 对象的创建时间，用 Unix 时间戳表示
         * @param {number} [createdGte] 小于或等于 charge 对象的创建时间，用 Unix 时间戳表示
         * @param {'CHANNEL_INVALID_UNSPECIFIED' | 'BALANCE' | 'AlipayQR' | 'AlipayScan' | 'AlipayApp' | 'AlipayWap' | 'AlipayPage' | 'AlipayFace' | 'AlipayLite' | 'WechatpayApp' | 'WechatpayJSAPI' | 'WechatpayH5' | 'WechatpayNative' | 'WechatpayLite' | 'WechatpayFace' | 'WechatpayScan'} [channel] [OPTIONAL] 渠道名称   - BALANCE: 余额支付  - AlipayQR: 支付宝扫码支付  - AlipayScan: 支付宝条码支付  - AlipayApp: 支付宝 App 支付  - AlipayWap: 支付宝手机网站支付  - AlipayPage: 支付宝电脑网站支付  - AlipayFace: 支付宝刷脸支付  - AlipayLite: 支付宝小程序支付  - WechatpayApp: 微信 App 支付  - WechatpayJSAPI: 微信 JSAPI 支付  - WechatpayH5: 微信 H5 支付  - WechatpayNative: 微信 Native 支付  - WechatpayLite: 微信小程序支付  - WechatpayFace: 刷脸支付  - WechatpayScan: 微信付款码支付
         * @param {boolean} [paid] [OPTIONAL] 是否已付款
         * @param {boolean} [refunded] [OPTIONAL] 是否存在退款信息，无论退款是否成功。
         * @param {boolean} [reversed] [OPTIONAL] 是否已撤销
         * @param {boolean} [closed] [OPTIONAL] 是否已关闭
         * @param {boolean} [expired] [OPTIONAL] 是否已过期
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tradeServiceQueryChargeList(appId?: string, limit?: number, startingAfter?: string, endingBefore?: string, merchantTradeId?: string, createdLt?: number, createdLte?: number, createdGt?: number, createdGte?: number, channel?: 'CHANNEL_INVALID_UNSPECIFIED' | 'BALANCE' | 'AlipayQR' | 'AlipayScan' | 'AlipayApp' | 'AlipayWap' | 'AlipayPage' | 'AlipayFace' | 'AlipayLite' | 'WechatpayApp' | 'WechatpayJSAPI' | 'WechatpayH5' | 'WechatpayNative' | 'WechatpayLite' | 'WechatpayFace' | 'WechatpayScan', paid?: boolean, refunded?: boolean, reversed?: boolean, closed?: boolean, expired?: boolean, options: any = {}): FetchArgs {
            const localVarPath = `/transaction/v1/charges`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-JUSTAP-API-KEY")
					: configuration.apiKey;
                localVarHeaderParameter["X-JUSTAP-API-KEY"] = localVarApiKeyValue;
            }

            if (appId !== undefined) {
                localVarQueryParameter['app_id'] = appId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }

            if (merchantTradeId !== undefined) {
                localVarQueryParameter['merchant_trade_id'] = merchantTradeId;
            }

            if (createdLt !== undefined) {
                localVarQueryParameter['created.lt'] = createdLt;
            }

            if (createdLte !== undefined) {
                localVarQueryParameter['created.lte'] = createdLte;
            }

            if (createdGt !== undefined) {
                localVarQueryParameter['created.gt'] = createdGt;
            }

            if (createdGte !== undefined) {
                localVarQueryParameter['created.gte'] = createdGte;
            }

            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }

            if (paid !== undefined) {
                localVarQueryParameter['paid'] = paid;
            }

            if (refunded !== undefined) {
                localVarQueryParameter['refunded'] = refunded;
            }

            if (reversed !== undefined) {
                localVarQueryParameter['reversed'] = reversed;
            }

            if (closed !== undefined) {
                localVarQueryParameter['closed'] = closed;
            }

            if (expired !== undefined) {
                localVarQueryParameter['expired'] = expired;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 可以通过 charge 对象的查询接口查询某一个 charge 对象的退款列表，也可以通过 refund 对象的 id 查询一个已创建的 refund 对象。可以在 Webhooks 通知之前，通过查询接口确认退款状态。
         * @summary 查询 Refund 对象
         * @param {string} chargeId [REQUIRED] 支付 Charge Id
         * @param {string} refundId [REQUIRED] Refund 对象 id
         * @param {string} [appId] [REQUIRED] 应用 id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tradeServiceQueryRefund(chargeId: string, refundId: string, appId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'chargeId' is not null or undefined
            if (chargeId === null || chargeId === undefined) {
                throw new RequiredError('chargeId','Required parameter chargeId was null or undefined when calling tradeServiceQueryRefund.');
            }
            // verify required parameter 'refundId' is not null or undefined
            if (refundId === null || refundId === undefined) {
                throw new RequiredError('refundId','Required parameter refundId was null or undefined when calling tradeServiceQueryRefund.');
            }
            const localVarPath = `/transaction/v1/charges/{charge_id}/refunds/{refund_id}`
                .replace(`{${"charge_id"}}`, encodeURIComponent(String(chargeId)))
                .replace(`{${"refund_id"}}`, encodeURIComponent(String(refundId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-JUSTAP-API-KEY")
					: configuration.apiKey;
                localVarHeaderParameter["X-JUSTAP-API-KEY"] = localVarApiKeyValue;
            }

            if (appId !== undefined) {
                localVarQueryParameter['app_id'] = appId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 返回之前创建 charge 对象的一个 refund 对象列表。列表是按创建时间进行排序，总是将最新的 refund 对象显示在最前。
         * @summary 查询 Refund 对象列表
         * @param {string} chargeId [REQUIRED] 支付 Charge Id
         * @param {string} [appId] [REQUIRED] 应用 id
         * @param {number} [limit] [OPTIONAL] 限制有多少对象可以被返回，限制范围是从 1~100 项，默认是 10 项
         * @param {string} [startingAfter] [OPTIONAL] 在分页时使用的指针，决定了列表的第一项从何处开始。假设你的一次请求返回列表的最后一项的 id 是 obj_end，你可以使用 starting_after &#x3D; obj_end 去获取下一页
         * @param {string} [endingBefore] [OPTIONAL] 在分页时使用的指针，决定了列表的最末项在何处结束。假设你的一次请求返回列表的第一项的 id 是 obj_start，你可以使用 ending_before &#x3D; obj_start 去获取上一页
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tradeServiceQueryRefundList(chargeId: string, appId?: string, limit?: number, startingAfter?: string, endingBefore?: string, options: any = {}): FetchArgs {
            // verify required parameter 'chargeId' is not null or undefined
            if (chargeId === null || chargeId === undefined) {
                throw new RequiredError('chargeId','Required parameter chargeId was null or undefined when calling tradeServiceQueryRefundList.');
            }
            const localVarPath = `/transaction/v1/charges/{charge_id}/refunds`
                .replace(`{${"charge_id"}}`, encodeURIComponent(String(chargeId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-JUSTAP-API-KEY")
					: configuration.apiKey;
                localVarHeaderParameter["X-JUSTAP-API-KEY"] = localVarApiKeyValue;
            }

            if (appId !== undefined) {
                localVarQueryParameter['app_id'] = appId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 通过发起一次退款请求创建一个新的 refund 对象，只能对已经发生交易并且没有全额退款的 charge 对象发起退款。当进行全额退款之前，可以进行多次退款，直至全额退款。当一次退款成功后，会发送 Webhooks 通知。
         * @summary 创建 Refund 对象
         * @param {V1CreateRefundRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tradeServiceRefunds(body: V1CreateRefundRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling tradeServiceRefunds.');
            }
            const localVarPath = `/transaction/v1/refunds`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-JUSTAP-API-KEY")
					: configuration.apiKey;
                localVarHeaderParameter["X-JUSTAP-API-KEY"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"V1CreateRefundRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 针对已经创建的 Charge，你可以调用撤销接口进行交易的关闭。接口支持对于未成功付款的订单进行撤销，则关闭交易。调用此接口后用户后期不能支付成功。  注：撤销订单在不同收单机构会有不同的行为。对于成功付款的订单请使用 退款 接口进行退款处理。只有针对未支付的订单，我们建议你调用撤销接口。  - 微信支付：如果此订单用户支付失败，微信支付系统会将此订单关闭；如果用户支付成功，微信支付系统会将此订单资金退还给用户。(7天以内的交易单可调用撤销) - 支付宝：如果此订单用户支付失败，支付宝系统会将此订单关闭；如果用户支付成功，支付宝系统会将此订单资金退还给用户。
         * @summary 撤销 Charge 对象
         * @param {string} chargeId Charge 对象 id
         * @param {string} [appId] [REQUIRED] 应用 id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tradeServiceReverseCharge(chargeId: string, appId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'chargeId' is not null or undefined
            if (chargeId === null || chargeId === undefined) {
                throw new RequiredError('chargeId','Required parameter chargeId was null or undefined when calling tradeServiceReverseCharge.');
            }
            const localVarPath = `/transaction/v1/charges/{charge_id}/reverse`
                .replace(`{${"charge_id"}}`, encodeURIComponent(String(chargeId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-JUSTAP-API-KEY")
					: configuration.apiKey;
                localVarHeaderParameter["X-JUSTAP-API-KEY"] = localVarApiKeyValue;
            }

            if (appId !== undefined) {
                localVarQueryParameter['app_id'] = appId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 发起一次支付请求时需要创建一个新的 charge 对象，获取一个可用的支付凭据用于客户端向第三方渠道发起支付请求。如果使用测试模式的 API Key，则不会发生真实交易。当支付成功后，会发送 Webhooks 通知。
         * @summary 创建 Charge 对象
         * @param {V1CreateChargeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tradeServiceCharges(body: V1CreateChargeRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V1ChargeResponse> {
            let localVarFetchArgs = DefaultApiFetchParamCreator(configuration).tradeServiceCharges(body, options);
            localVarFetchArgs = Object.assign({}, localVarFetchArgs, getSign(configuration, localVarFetchArgs));
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 你可以在后台异步通知之前，通过查询接口确认支付状态。通过charge对象的id查询一个已创建的charge对象。
         * @summary 查询 Charge 对象
         * @param {string} chargeId [REQUIRED] Charge 对象 id
         * @param {string} [appId] [REQUIRED] 应用 id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tradeServiceQueryCharge(chargeId: string, appId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V1ChargeResponse> {
            let localVarFetchArgs = DefaultApiFetchParamCreator(configuration).tradeServiceQueryCharge(chargeId, appId, options);
            localVarFetchArgs = Object.assign({}, localVarFetchArgs, getSign(configuration, localVarFetchArgs));
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 返回之前创建过 charge 对象的一个列表。列表是按创建时间进行排序，总是将最新的 charge 对象显示在最前。如果不设置 created 参数，默认查询近一个月的数据；设置了 created 参数，会按照对应的时间段查询。
         * @summary 查询 Charge 对象列表
         * @param {string} [appId] [REQUIRED] 应用 id
         * @param {number} [limit] [OPTIONAL] 限制有多少对象可以被返回，限制范围是从 1~100 项，默认是 10 项
         * @param {string} [startingAfter] [OPTIONAL] 在分页时使用的指针，决定了列表的第一项从何处开始。假设你的一次请求返回列表的最后一项的 id 是 obj_end，你可以使用 starting_after &#x3D; obj_end 去获取下一页
         * @param {string} [endingBefore] [OPTIONAL] 在分页时使用的指针，决定了列表的最末项在何处结束。假设你的一次请求返回列表的第一项的 id 是 obj_start，你可以使用 ending_before &#x3D; obj_start 去获取上一页
         * @param {string} [merchantTradeId] [OPTIONAL] 客户系统订单号
         * @param {number} [createdLt] 大于 charge 对象的创建时间，用 Unix 时间戳表示
         * @param {number} [createdLte] 大于或等于 charge 对象的创建时间，用 Unix 时间戳表示
         * @param {number} [createdGt] 小于 charge 对象的创建时间，用 Unix 时间戳表示
         * @param {number} [createdGte] 小于或等于 charge 对象的创建时间，用 Unix 时间戳表示
         * @param {'CHANNEL_INVALID_UNSPECIFIED' | 'BALANCE' | 'AlipayQR' | 'AlipayScan' | 'AlipayApp' | 'AlipayWap' | 'AlipayPage' | 'AlipayFace' | 'AlipayLite' | 'WechatpayApp' | 'WechatpayJSAPI' | 'WechatpayH5' | 'WechatpayNative' | 'WechatpayLite' | 'WechatpayFace' | 'WechatpayScan'} [channel] [OPTIONAL] 渠道名称   - BALANCE: 余额支付  - AlipayQR: 支付宝扫码支付  - AlipayScan: 支付宝条码支付  - AlipayApp: 支付宝 App 支付  - AlipayWap: 支付宝手机网站支付  - AlipayPage: 支付宝电脑网站支付  - AlipayFace: 支付宝刷脸支付  - AlipayLite: 支付宝小程序支付  - WechatpayApp: 微信 App 支付  - WechatpayJSAPI: 微信 JSAPI 支付  - WechatpayH5: 微信 H5 支付  - WechatpayNative: 微信 Native 支付  - WechatpayLite: 微信小程序支付  - WechatpayFace: 刷脸支付  - WechatpayScan: 微信付款码支付
         * @param {boolean} [paid] [OPTIONAL] 是否已付款
         * @param {boolean} [refunded] [OPTIONAL] 是否存在退款信息，无论退款是否成功。
         * @param {boolean} [reversed] [OPTIONAL] 是否已撤销
         * @param {boolean} [closed] [OPTIONAL] 是否已关闭
         * @param {boolean} [expired] [OPTIONAL] 是否已过期
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tradeServiceQueryChargeList(appId?: string, limit?: number, startingAfter?: string, endingBefore?: string, merchantTradeId?: string, createdLt?: number, createdLte?: number, createdGt?: number, createdGte?: number, channel?: 'CHANNEL_INVALID_UNSPECIFIED' | 'BALANCE' | 'AlipayQR' | 'AlipayScan' | 'AlipayApp' | 'AlipayWap' | 'AlipayPage' | 'AlipayFace' | 'AlipayLite' | 'WechatpayApp' | 'WechatpayJSAPI' | 'WechatpayH5' | 'WechatpayNative' | 'WechatpayLite' | 'WechatpayFace' | 'WechatpayScan', paid?: boolean, refunded?: boolean, reversed?: boolean, closed?: boolean, expired?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V1ChargeListResponse> {
            let localVarFetchArgs = DefaultApiFetchParamCreator(configuration).tradeServiceQueryChargeList(appId, limit, startingAfter, endingBefore, merchantTradeId, createdLt, createdLte, createdGt, createdGte, channel, paid, refunded, reversed, closed, expired, options);
            localVarFetchArgs = Object.assign({}, localVarFetchArgs, getSign(configuration, localVarFetchArgs));
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 可以通过 charge 对象的查询接口查询某一个 charge 对象的退款列表，也可以通过 refund 对象的 id 查询一个已创建的 refund 对象。可以在 Webhooks 通知之前，通过查询接口确认退款状态。
         * @summary 查询 Refund 对象
         * @param {string} chargeId [REQUIRED] 支付 Charge Id
         * @param {string} refundId [REQUIRED] Refund 对象 id
         * @param {string} [appId] [REQUIRED] 应用 id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tradeServiceQueryRefund(chargeId: string, refundId: string, appId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V1RefundResponse> {
            let localVarFetchArgs = DefaultApiFetchParamCreator(configuration).tradeServiceQueryRefund(chargeId, refundId, appId, options);
            localVarFetchArgs = Object.assign({}, localVarFetchArgs, getSign(configuration, localVarFetchArgs));
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 返回之前创建 charge 对象的一个 refund 对象列表。列表是按创建时间进行排序，总是将最新的 refund 对象显示在最前。
         * @summary 查询 Refund 对象列表
         * @param {string} chargeId [REQUIRED] 支付 Charge Id
         * @param {string} [appId] [REQUIRED] 应用 id
         * @param {number} [limit] [OPTIONAL] 限制有多少对象可以被返回，限制范围是从 1~100 项，默认是 10 项
         * @param {string} [startingAfter] [OPTIONAL] 在分页时使用的指针，决定了列表的第一项从何处开始。假设你的一次请求返回列表的最后一项的 id 是 obj_end，你可以使用 starting_after &#x3D; obj_end 去获取下一页
         * @param {string} [endingBefore] [OPTIONAL] 在分页时使用的指针，决定了列表的最末项在何处结束。假设你的一次请求返回列表的第一项的 id 是 obj_start，你可以使用 ending_before &#x3D; obj_start 去获取上一页
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tradeServiceQueryRefundList(chargeId: string, appId?: string, limit?: number, startingAfter?: string, endingBefore?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V1RefundListResponse> {
            let localVarFetchArgs = DefaultApiFetchParamCreator(configuration).tradeServiceQueryRefundList(chargeId, appId, limit, startingAfter, endingBefore, options);
            localVarFetchArgs = Object.assign({}, localVarFetchArgs, getSign(configuration, localVarFetchArgs));
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 通过发起一次退款请求创建一个新的 refund 对象，只能对已经发生交易并且没有全额退款的 charge 对象发起退款。当进行全额退款之前，可以进行多次退款，直至全额退款。当一次退款成功后，会发送 Webhooks 通知。
         * @summary 创建 Refund 对象
         * @param {V1CreateRefundRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tradeServiceRefunds(body: V1CreateRefundRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V1RefundResponse> {
            let localVarFetchArgs = DefaultApiFetchParamCreator(configuration).tradeServiceRefunds(body, options);
            localVarFetchArgs = Object.assign({}, localVarFetchArgs, getSign(configuration, localVarFetchArgs));
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 针对已经创建的 Charge，你可以调用撤销接口进行交易的关闭。接口支持对于未成功付款的订单进行撤销，则关闭交易。调用此接口后用户后期不能支付成功。  注：撤销订单在不同收单机构会有不同的行为。对于成功付款的订单请使用 退款 接口进行退款处理。只有针对未支付的订单，我们建议你调用撤销接口。  - 微信支付：如果此订单用户支付失败，微信支付系统会将此订单关闭；如果用户支付成功，微信支付系统会将此订单资金退还给用户。(7天以内的交易单可调用撤销) - 支付宝：如果此订单用户支付失败，支付宝系统会将此订单关闭；如果用户支付成功，支付宝系统会将此订单资金退还给用户。
         * @summary 撤销 Charge 对象
         * @param {string} chargeId Charge 对象 id
         * @param {string} [appId] [REQUIRED] 应用 id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tradeServiceReverseCharge(chargeId: string, appId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V1ChargeResponse> {
            let localVarFetchArgs = DefaultApiFetchParamCreator(configuration).tradeServiceReverseCharge(chargeId, appId, options);
            localVarFetchArgs = Object.assign({}, localVarFetchArgs, getSign(configuration, localVarFetchArgs));
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 发起一次支付请求时需要创建一个新的 charge 对象，获取一个可用的支付凭据用于客户端向第三方渠道发起支付请求。如果使用测试模式的 API Key，则不会发生真实交易。当支付成功后，会发送 Webhooks 通知。
         * @summary 创建 Charge 对象
         * @param {V1CreateChargeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tradeServiceCharges(body: V1CreateChargeRequest, options?: any) {
            return DefaultApiFp(configuration).tradeServiceCharges(body, options)(fetch, basePath);
        },
        /**
         * 你可以在后台异步通知之前，通过查询接口确认支付状态。通过charge对象的id查询一个已创建的charge对象。
         * @summary 查询 Charge 对象
         * @param {string} chargeId [REQUIRED] Charge 对象 id
         * @param {string} [appId] [REQUIRED] 应用 id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tradeServiceQueryCharge(chargeId: string, appId?: string, options?: any) {
            return DefaultApiFp(configuration).tradeServiceQueryCharge(chargeId, appId, options)(fetch, basePath);
        },
        /**
         * 返回之前创建过 charge 对象的一个列表。列表是按创建时间进行排序，总是将最新的 charge 对象显示在最前。如果不设置 created 参数，默认查询近一个月的数据；设置了 created 参数，会按照对应的时间段查询。
         * @summary 查询 Charge 对象列表
         * @param {string} [appId] [REQUIRED] 应用 id
         * @param {number} [limit] [OPTIONAL] 限制有多少对象可以被返回，限制范围是从 1~100 项，默认是 10 项
         * @param {string} [startingAfter] [OPTIONAL] 在分页时使用的指针，决定了列表的第一项从何处开始。假设你的一次请求返回列表的最后一项的 id 是 obj_end，你可以使用 starting_after &#x3D; obj_end 去获取下一页
         * @param {string} [endingBefore] [OPTIONAL] 在分页时使用的指针，决定了列表的最末项在何处结束。假设你的一次请求返回列表的第一项的 id 是 obj_start，你可以使用 ending_before &#x3D; obj_start 去获取上一页
         * @param {string} [merchantTradeId] [OPTIONAL] 客户系统订单号
         * @param {number} [createdLt] 大于 charge 对象的创建时间，用 Unix 时间戳表示
         * @param {number} [createdLte] 大于或等于 charge 对象的创建时间，用 Unix 时间戳表示
         * @param {number} [createdGt] 小于 charge 对象的创建时间，用 Unix 时间戳表示
         * @param {number} [createdGte] 小于或等于 charge 对象的创建时间，用 Unix 时间戳表示
         * @param {'CHANNEL_INVALID_UNSPECIFIED' | 'BALANCE' | 'AlipayQR' | 'AlipayScan' | 'AlipayApp' | 'AlipayWap' | 'AlipayPage' | 'AlipayFace' | 'AlipayLite' | 'WechatpayApp' | 'WechatpayJSAPI' | 'WechatpayH5' | 'WechatpayNative' | 'WechatpayLite' | 'WechatpayFace' | 'WechatpayScan'} [channel] [OPTIONAL] 渠道名称   - BALANCE: 余额支付  - AlipayQR: 支付宝扫码支付  - AlipayScan: 支付宝条码支付  - AlipayApp: 支付宝 App 支付  - AlipayWap: 支付宝手机网站支付  - AlipayPage: 支付宝电脑网站支付  - AlipayFace: 支付宝刷脸支付  - AlipayLite: 支付宝小程序支付  - WechatpayApp: 微信 App 支付  - WechatpayJSAPI: 微信 JSAPI 支付  - WechatpayH5: 微信 H5 支付  - WechatpayNative: 微信 Native 支付  - WechatpayLite: 微信小程序支付  - WechatpayFace: 刷脸支付  - WechatpayScan: 微信付款码支付
         * @param {boolean} [paid] [OPTIONAL] 是否已付款
         * @param {boolean} [refunded] [OPTIONAL] 是否存在退款信息，无论退款是否成功。
         * @param {boolean} [reversed] [OPTIONAL] 是否已撤销
         * @param {boolean} [closed] [OPTIONAL] 是否已关闭
         * @param {boolean} [expired] [OPTIONAL] 是否已过期
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tradeServiceQueryChargeList(appId?: string, limit?: number, startingAfter?: string, endingBefore?: string, merchantTradeId?: string, createdLt?: number, createdLte?: number, createdGt?: number, createdGte?: number, channel?: 'CHANNEL_INVALID_UNSPECIFIED' | 'BALANCE' | 'AlipayQR' | 'AlipayScan' | 'AlipayApp' | 'AlipayWap' | 'AlipayPage' | 'AlipayFace' | 'AlipayLite' | 'WechatpayApp' | 'WechatpayJSAPI' | 'WechatpayH5' | 'WechatpayNative' | 'WechatpayLite' | 'WechatpayFace' | 'WechatpayScan', paid?: boolean, refunded?: boolean, reversed?: boolean, closed?: boolean, expired?: boolean, options?: any) {
            return DefaultApiFp(configuration).tradeServiceQueryChargeList(appId, limit, startingAfter, endingBefore, merchantTradeId, createdLt, createdLte, createdGt, createdGte, channel, paid, refunded, reversed, closed, expired, options)(fetch, basePath);
        },
        /**
         * 可以通过 charge 对象的查询接口查询某一个 charge 对象的退款列表，也可以通过 refund 对象的 id 查询一个已创建的 refund 对象。可以在 Webhooks 通知之前，通过查询接口确认退款状态。
         * @summary 查询 Refund 对象
         * @param {string} chargeId [REQUIRED] 支付 Charge Id
         * @param {string} refundId [REQUIRED] Refund 对象 id
         * @param {string} [appId] [REQUIRED] 应用 id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tradeServiceQueryRefund(chargeId: string, refundId: string, appId?: string, options?: any) {
            return DefaultApiFp(configuration).tradeServiceQueryRefund(chargeId, refundId, appId, options)(fetch, basePath);
        },
        /**
         * 返回之前创建 charge 对象的一个 refund 对象列表。列表是按创建时间进行排序，总是将最新的 refund 对象显示在最前。
         * @summary 查询 Refund 对象列表
         * @param {string} chargeId [REQUIRED] 支付 Charge Id
         * @param {string} [appId] [REQUIRED] 应用 id
         * @param {number} [limit] [OPTIONAL] 限制有多少对象可以被返回，限制范围是从 1~100 项，默认是 10 项
         * @param {string} [startingAfter] [OPTIONAL] 在分页时使用的指针，决定了列表的第一项从何处开始。假设你的一次请求返回列表的最后一项的 id 是 obj_end，你可以使用 starting_after &#x3D; obj_end 去获取下一页
         * @param {string} [endingBefore] [OPTIONAL] 在分页时使用的指针，决定了列表的最末项在何处结束。假设你的一次请求返回列表的第一项的 id 是 obj_start，你可以使用 ending_before &#x3D; obj_start 去获取上一页
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tradeServiceQueryRefundList(chargeId: string, appId?: string, limit?: number, startingAfter?: string, endingBefore?: string, options?: any) {
            return DefaultApiFp(configuration).tradeServiceQueryRefundList(chargeId, appId, limit, startingAfter, endingBefore, options)(fetch, basePath);
        },
        /**
         * 通过发起一次退款请求创建一个新的 refund 对象，只能对已经发生交易并且没有全额退款的 charge 对象发起退款。当进行全额退款之前，可以进行多次退款，直至全额退款。当一次退款成功后，会发送 Webhooks 通知。
         * @summary 创建 Refund 对象
         * @param {V1CreateRefundRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tradeServiceRefunds(body: V1CreateRefundRequest, options?: any) {
            return DefaultApiFp(configuration).tradeServiceRefunds(body, options)(fetch, basePath);
        },
        /**
         * 针对已经创建的 Charge，你可以调用撤销接口进行交易的关闭。接口支持对于未成功付款的订单进行撤销，则关闭交易。调用此接口后用户后期不能支付成功。  注：撤销订单在不同收单机构会有不同的行为。对于成功付款的订单请使用 退款 接口进行退款处理。只有针对未支付的订单，我们建议你调用撤销接口。  - 微信支付：如果此订单用户支付失败，微信支付系统会将此订单关闭；如果用户支付成功，微信支付系统会将此订单资金退还给用户。(7天以内的交易单可调用撤销) - 支付宝：如果此订单用户支付失败，支付宝系统会将此订单关闭；如果用户支付成功，支付宝系统会将此订单资金退还给用户。
         * @summary 撤销 Charge 对象
         * @param {string} chargeId Charge 对象 id
         * @param {string} [appId] [REQUIRED] 应用 id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tradeServiceReverseCharge(chargeId: string, appId?: string, options?: any) {
            return DefaultApiFp(configuration).tradeServiceReverseCharge(chargeId, appId, options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 发起一次支付请求时需要创建一个新的 charge 对象，获取一个可用的支付凭据用于客户端向第三方渠道发起支付请求。如果使用测试模式的 API Key，则不会发生真实交易。当支付成功后，会发送 Webhooks 通知。
     * @summary 创建 Charge 对象
     * @param {V1CreateChargeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tradeServiceCharges(body: V1CreateChargeRequest, options?: any) {
        return DefaultApiFp(this.configuration).tradeServiceCharges(body, options)(this.fetch, this.basePath);
    }

    /**
     * 你可以在后台异步通知之前，通过查询接口确认支付状态。通过charge对象的id查询一个已创建的charge对象。
     * @summary 查询 Charge 对象
     * @param {string} chargeId [REQUIRED] Charge 对象 id
     * @param {string} [appId] [REQUIRED] 应用 id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tradeServiceQueryCharge(chargeId: string, appId?: string, options?: any) {
        return DefaultApiFp(this.configuration).tradeServiceQueryCharge(chargeId, appId, options)(this.fetch, this.basePath);
    }

    /**
     * 返回之前创建过 charge 对象的一个列表。列表是按创建时间进行排序，总是将最新的 charge 对象显示在最前。如果不设置 created 参数，默认查询近一个月的数据；设置了 created 参数，会按照对应的时间段查询。
     * @summary 查询 Charge 对象列表
     * @param {string} [appId] [REQUIRED] 应用 id
     * @param {number} [limit] [OPTIONAL] 限制有多少对象可以被返回，限制范围是从 1~100 项，默认是 10 项
     * @param {string} [startingAfter] [OPTIONAL] 在分页时使用的指针，决定了列表的第一项从何处开始。假设你的一次请求返回列表的最后一项的 id 是 obj_end，你可以使用 starting_after &#x3D; obj_end 去获取下一页
     * @param {string} [endingBefore] [OPTIONAL] 在分页时使用的指针，决定了列表的最末项在何处结束。假设你的一次请求返回列表的第一项的 id 是 obj_start，你可以使用 ending_before &#x3D; obj_start 去获取上一页
     * @param {string} [merchantTradeId] [OPTIONAL] 客户系统订单号
     * @param {number} [createdLt] 大于 charge 对象的创建时间，用 Unix 时间戳表示
     * @param {number} [createdLte] 大于或等于 charge 对象的创建时间，用 Unix 时间戳表示
     * @param {number} [createdGt] 小于 charge 对象的创建时间，用 Unix 时间戳表示
     * @param {number} [createdGte] 小于或等于 charge 对象的创建时间，用 Unix 时间戳表示
     * @param {'CHANNEL_INVALID_UNSPECIFIED' | 'BALANCE' | 'AlipayQR' | 'AlipayScan' | 'AlipayApp' | 'AlipayWap' | 'AlipayPage' | 'AlipayFace' | 'AlipayLite' | 'WechatpayApp' | 'WechatpayJSAPI' | 'WechatpayH5' | 'WechatpayNative' | 'WechatpayLite' | 'WechatpayFace' | 'WechatpayScan'} [channel] [OPTIONAL] 渠道名称   - BALANCE: 余额支付  - AlipayQR: 支付宝扫码支付  - AlipayScan: 支付宝条码支付  - AlipayApp: 支付宝 App 支付  - AlipayWap: 支付宝手机网站支付  - AlipayPage: 支付宝电脑网站支付  - AlipayFace: 支付宝刷脸支付  - AlipayLite: 支付宝小程序支付  - WechatpayApp: 微信 App 支付  - WechatpayJSAPI: 微信 JSAPI 支付  - WechatpayH5: 微信 H5 支付  - WechatpayNative: 微信 Native 支付  - WechatpayLite: 微信小程序支付  - WechatpayFace: 刷脸支付  - WechatpayScan: 微信付款码支付
     * @param {boolean} [paid] [OPTIONAL] 是否已付款
     * @param {boolean} [refunded] [OPTIONAL] 是否存在退款信息，无论退款是否成功。
     * @param {boolean} [reversed] [OPTIONAL] 是否已撤销
     * @param {boolean} [closed] [OPTIONAL] 是否已关闭
     * @param {boolean} [expired] [OPTIONAL] 是否已过期
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tradeServiceQueryChargeList(appId?: string, limit?: number, startingAfter?: string, endingBefore?: string, merchantTradeId?: string, createdLt?: number, createdLte?: number, createdGt?: number, createdGte?: number, channel?: 'CHANNEL_INVALID_UNSPECIFIED' | 'BALANCE' | 'AlipayQR' | 'AlipayScan' | 'AlipayApp' | 'AlipayWap' | 'AlipayPage' | 'AlipayFace' | 'AlipayLite' | 'WechatpayApp' | 'WechatpayJSAPI' | 'WechatpayH5' | 'WechatpayNative' | 'WechatpayLite' | 'WechatpayFace' | 'WechatpayScan', paid?: boolean, refunded?: boolean, reversed?: boolean, closed?: boolean, expired?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).tradeServiceQueryChargeList(appId, limit, startingAfter, endingBefore, merchantTradeId, createdLt, createdLte, createdGt, createdGte, channel, paid, refunded, reversed, closed, expired, options)(this.fetch, this.basePath);
    }

    /**
     * 可以通过 charge 对象的查询接口查询某一个 charge 对象的退款列表，也可以通过 refund 对象的 id 查询一个已创建的 refund 对象。可以在 Webhooks 通知之前，通过查询接口确认退款状态。
     * @summary 查询 Refund 对象
     * @param {string} chargeId [REQUIRED] 支付 Charge Id
     * @param {string} refundId [REQUIRED] Refund 对象 id
     * @param {string} [appId] [REQUIRED] 应用 id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tradeServiceQueryRefund(chargeId: string, refundId: string, appId?: string, options?: any) {
        return DefaultApiFp(this.configuration).tradeServiceQueryRefund(chargeId, refundId, appId, options)(this.fetch, this.basePath);
    }

    /**
     * 返回之前创建 charge 对象的一个 refund 对象列表。列表是按创建时间进行排序，总是将最新的 refund 对象显示在最前。
     * @summary 查询 Refund 对象列表
     * @param {string} chargeId [REQUIRED] 支付 Charge Id
     * @param {string} [appId] [REQUIRED] 应用 id
     * @param {number} [limit] [OPTIONAL] 限制有多少对象可以被返回，限制范围是从 1~100 项，默认是 10 项
     * @param {string} [startingAfter] [OPTIONAL] 在分页时使用的指针，决定了列表的第一项从何处开始。假设你的一次请求返回列表的最后一项的 id 是 obj_end，你可以使用 starting_after &#x3D; obj_end 去获取下一页
     * @param {string} [endingBefore] [OPTIONAL] 在分页时使用的指针，决定了列表的最末项在何处结束。假设你的一次请求返回列表的第一项的 id 是 obj_start，你可以使用 ending_before &#x3D; obj_start 去获取上一页
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tradeServiceQueryRefundList(chargeId: string, appId?: string, limit?: number, startingAfter?: string, endingBefore?: string, options?: any) {
        return DefaultApiFp(this.configuration).tradeServiceQueryRefundList(chargeId, appId, limit, startingAfter, endingBefore, options)(this.fetch, this.basePath);
    }

    /**
     * 通过发起一次退款请求创建一个新的 refund 对象，只能对已经发生交易并且没有全额退款的 charge 对象发起退款。当进行全额退款之前，可以进行多次退款，直至全额退款。当一次退款成功后，会发送 Webhooks 通知。
     * @summary 创建 Refund 对象
     * @param {V1CreateRefundRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tradeServiceRefunds(body: V1CreateRefundRequest, options?: any) {
        return DefaultApiFp(this.configuration).tradeServiceRefunds(body, options)(this.fetch, this.basePath);
    }

    /**
     * 针对已经创建的 Charge，你可以调用撤销接口进行交易的关闭。接口支持对于未成功付款的订单进行撤销，则关闭交易。调用此接口后用户后期不能支付成功。  注：撤销订单在不同收单机构会有不同的行为。对于成功付款的订单请使用 退款 接口进行退款处理。只有针对未支付的订单，我们建议你调用撤销接口。  - 微信支付：如果此订单用户支付失败，微信支付系统会将此订单关闭；如果用户支付成功，微信支付系统会将此订单资金退还给用户。(7天以内的交易单可调用撤销) - 支付宝：如果此订单用户支付失败，支付宝系统会将此订单关闭；如果用户支付成功，支付宝系统会将此订单资金退还给用户。
     * @summary 撤销 Charge 对象
     * @param {string} chargeId Charge 对象 id
     * @param {string} [appId] [REQUIRED] 应用 id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tradeServiceReverseCharge(chargeId: string, appId?: string, options?: any) {
        return DefaultApiFp(this.configuration).tradeServiceReverseCharge(chargeId, appId, options)(this.fetch, this.basePath);
    }

}

